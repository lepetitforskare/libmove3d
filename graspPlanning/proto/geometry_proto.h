/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Thu Jul 24 10:55:28 2008
 */
#ifndef __CEXTRACT__

extern int line_triangle_intersection( p3d_vector3 c1, p3d_vector3 c2, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, p3d_vector3 intersection);

extern int ray_triangle_intersection( p3d_vector3 origin, p3d_vector3 direction, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, p3d_vector3 intersection);

extern int line_segment_plane_intersection( poly_plane plane, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 result);

extern int triangle_plane_intersection( p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, poly_plane plane, p3d_vector3 result1, p3d_vector3 result2);

extern int check_triangle_plane_intersection( p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, poly_plane plane);
extern int is_point_above_plane( p3d_vector3 point, poly_plane plane);

extern int plane_plane_intersection( poly_plane *plane1, poly_plane *plane2, p3d_vector3 point_on_line, p3d_vector3 line_direction);

extern poly_plane plane_from_points( p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3);

extern poly_plane plane_from_point_and_normal(p3d_vector3 p, p3d_vector3 normal);

extern poly_plane transform_plane_equation(p3d_matrix4 T, poly_plane plane);

extern int line_segment_sphere_intersection( p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 center, double radius, p3d_vector3 result1, p3d_vector3 result2);

extern void point_in_triangle_from_parameters( double alpha, double beta, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, p3d_vector3 result);

extern int parameters_in_triangle_from_point( p3d_vector3 p, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, double *alpha, double *beta);

extern void orthogonal_projection_point_onto_plane( p3d_vector3 point, poly_plane plane, p3d_vector3 result);

extern void orthogonal_vector( p3d_vector3 v, p3d_vector3 result);

extern void orthonormal_basis( p3d_vector3 u, p3d_vector3 v, p3d_vector3 w);

extern double point_to_triangle_distance( p3d_vector3 point, p3d_vector3 p0, p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 closestPoint);

extern void draw_plane( poly_plane plane);

extern int line_line_intersection2D( double point1[2], double direction1[2], double point2[2], double direction2[2], double result[2]);

extern int segment_segment_intersection2D( double a1[2], double b1[2], double a2[2], double b2[2], double result1[2], double result2[2]);

extern int is_point_on_segment2D( double p[2], double a[2], double b[2]);

extern double triangle_area( p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3);

extern double polygon_area( double(*vertices)[2], int nb_vertices);

extern int save_polygon( char *name, double(*vertices)[2], int nb_vertices);

extern int is_polygon_simple( double(*vertices)[2], int nb_vertices);

extern int is_polygon_ccw( double(*vertices)[2], int nb_vertices);

extern int is_point_in_polygon( double point[2], double(*vertices)[2], int nb_vertices);

extern int polygon_polygon_inclusion( double(*vertices1)[2], int nb_vertices1, double(*vertices2)[2], int nb_vertices2);

extern double tetrahedron_volume( p3d_vector3 a, p3d_vector3 b, p3d_vector3 c, p3d_vector3 d);

extern void spherical_edge_projection(p3d_vector3 x1, p3d_vector3 x2, double a, p3d_vector3 v);

extern p3d_vector3 *sample_sphere_surface(int nb_samples, double radius);

extern p3d_vector3 * sample_triangle_surface(p3d_vector3 p1, p3d_vector3 p2, p3d_vector3 p3, double step, int *nb_samples)
;

#endif /* __CEXTRACT__ */
