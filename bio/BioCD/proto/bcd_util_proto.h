/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Wed Jun 23 14:30:19 2004
 */
#ifndef __CEXTRACT__

extern Robot_structure **get_bcd_robots(void);
extern void bio_set_autocol ( int nrobot, int nforbidden, int *nrigid1, int *natom1, int *nrigid2, int *natom2 );
extern void rebuild ( Robot_structure *robot );
extern void preprogr_collisions ( Robot_structure *robot );
extern void free_robot ( Robot_structure *robot );
extern void bio_init_molecules ( double scale );
extern void bio_create_molecule ( int i, double scale );
extern void bio_create_molecules ( double scale );
extern void p3d_start_bio_col ( void );
extern int bio_all_molecules_col ( void );
extern int bio_molecule_col ( int nrobot );
extern int bio_all_molecules_col_with_report ( void );
extern void set_affichage_en_rouge ( int affich );
extern int get_affichage_en_rouge ( void );
extern int biocol_robot_report ( int nrobot );
extern int bio_molecule_autocol ( int i );
extern int bio_two_molecule_col ( int i, int j );
extern int supress_sc_rigid_sequence ( int nrobot, int first, int last );
extern int activate_sc_rigid_sequence ( int nrobot, int first, int last );
extern int activate_sc_rigid ( int nrobot, int namino );
extern int supress_sc_rigid ( int nrobot, int namino );
extern int supress_bb_rigid_sequence ( int nrobot, int first, int last );
extern int activate_bb_rigid_sequence ( int nrobot, int first, int last );
extern int activate_bb_rigid ( int nrobot, int namino );
extern int supress_bb_rigid ( int nrobot, int namino );
extern Joint_tablespt *give_joint_tables ( int nrobot );
extern int bio_sc_col ( int nrobot, int namino );
extern int bio_bb_col ( int nrobot, int namino );
extern int get_number_of_bcd_robots( void );
extern int bio_molecule_col_no_autocol( int nrobot );
extern double bioGetInvMinLigProtDist(void);
double bioGetLigRotaMotionFromInit(p3d_rob* robotPt,  
				   configPt currentConf);
#endif /* __CEXTRACT__ */
