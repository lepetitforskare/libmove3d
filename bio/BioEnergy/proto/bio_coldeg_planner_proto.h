/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern int bio_explore_coldeg(void);
extern int bio_expand_coldeg_rrt(p3d_graph *G,int (*fct_stop)(void));

extern double *bio_alloc_coldeg_config(int n_coldeg);
extern void  bio_destroy_coldeg_config(double *coldeg_q, int n_coldeg);
extern void bio_copy_coldeg_config(double *coldeg_qsrc, double *coldeg_qdst, int n_coldeg);
extern void bio_print_coldeg_config(double *coldeg_q, int n_coldeg);
extern double bio_dist_coldeg_config(double *coldeg_q1, double *coldeg_q2, int n_coldeg);
extern void bio_copy_coldeg_q_in_N(p3d_node *N, double *coldeg_q, int n_coldeg);

extern void bio_coldeg_planner_init_weight(double w);

// MOVE TO ANOTHER FILE !!!
/* extern int bio_set_triade(int resSeq1, int resSeq2, int resSeq3, int conftype); */
/* extern int bio_get_triade(int triade_num, p3d_jnt **triade_jntPt, int *triade_conftype); */
/* extern double bio_measure_triade_surface_area(p3d_jnt **triade_jntPt, configPt q); */

/* extern int bio_set_pairs_for_dist(int nump, int *pairslist, int conftype); */
/* extern int bio_get_pairs_for_dist(int *nump, p3d_jnt ***pairs_jntPt, int *conftype); */
/* extern double bio_measure_distance_between_atom_pairs(int nump, p3d_jnt **pairs_jntPt, configPt q); */

/* extern void bio_search_max_weight_in_curr_rrt(void); */

/* extern int bio_set_goal_jnt_coordinates(void); */
/* extern int bio_get_goal_jnt_coordinates(p3d_vector3 **goal_jntcoordsPt); */
/* //extern int bio_get_goal_jnt_coordinates(double **goal_jntvPt); */
/* extern double bio_rms_to_goal_jnt_coords(p3d_rob *robPt, p3d_vector3 *goal_jnt_coords, configPt q); */
/* //extern double bio_rms_to_goal_jnt_coords(p3d_rob *robPt, double *goal_jntvPt, configPt q); */



#endif /* __CEXTRACT__ */
