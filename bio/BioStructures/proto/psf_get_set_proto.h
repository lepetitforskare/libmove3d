/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern psf_molecule* init_molecule_struct(char* name);
extern psf_protein* init_protein_struct(char* name);
extern psf_ligand* init_ligand_struct(char* fullName);
extern psf_rigid* init_rigid_struct();
extern psf_joint* init_joint_struct();
extern void free_protein ( psf_protein *protPt );
extern void free_ligand(psf_ligand *ligPt);
extern void free_molecule(psf_molecule *moleculePt);
extern psf_atom *get_N ( psf_residue *resPt );
extern psf_atom *get_CA ( psf_residue *resPt );
extern psf_atom *get_C ( psf_residue *resPt );
extern void get_N_pos ( psf_residue *resPt, double **apos );
extern void get_CA_pos ( psf_residue *resPt, double **apos );
extern void get_C_pos ( psf_residue *resPt, double **apos );
// extern int get_atom_in_list_by_serial(int serial, psf_atom*** theAtom, psf_atom **atomList, int natoms);
extern int psf_get_res_in_list_by_resSeq(int resSeq, psf_residue** theRes, psf_residue **resList, int nresidues);
extern int psf_get_atom_in_list_by_serial(int serial, psf_atom** theAtom, psf_atom **atomList, int natoms);
extern int psf_get_atom_in_list_by_name(int resSeq, char* atomName, psf_atom** theAtom, psf_residue **resList, int nresidues);
extern int psf_get_atom_pos_by_serial(psf_protein* protein, int serial ,double* pos);
extern int psf_get_atom_pos_by_name(psf_protein* protein, int resSeq, char* atomName, double* pos);
extern int psf_get_atom_type_by_serial(psf_protein* protein, int serial , atomTypes* type);
extern int psf_get_atom_type_by_name(psf_protein* protein, int resSeq, char* atomName, int* type);
extern int is_a_defined_serial(int serial, psf_atom **atomList, int natoms);

#endif /* __CEXTRACT__ */
