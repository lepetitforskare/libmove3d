/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern p3d_primitive *p3d_create_cube_primitive ( double a );
extern p3d_primitive *p3d_create_box_primitive ( double x, double y, double z );
extern p3d_primitive *p3d_create_sphere_primitive ( double r );
extern p3d_primitive *p3d_create_cylinder_primitive ( double r, double h );
extern p3d_primitive *p3d_create_cone_primitive ( double d1, double d2, double h );
extern p3d_poly *p3d_create_cube ( char name[20], double a, int type );
extern p3d_poly *p3d_create_box ( char name[20], double a, double b, double c, int type );
extern p3d_poly *p3d_create_srect ( char name[20], double a, double b, double h, double ux, double uy, double uz, double vx, double vy, double vz, int type );
extern p3d_poly *p3d_create_pyramid ( char name[20], double xbottom, double ybottom, double xtop, double ytop, double height, double xoff, double yoff, int type );
extern p3d_poly *p3d_create_cylindre ( char name[20], double r, double l, int type );
extern p3d_poly *p3d_create_cylindre_oval ( char name[20], double a, double b, double l, int type );
extern p3d_poly *p3d_create_prisme ( char name[20], int nvert, double r, double l, int type );
extern p3d_poly *p3d_create_rtorusslice ( char name[20], double r1, double r2, double height, double angle, int type );
extern p3d_poly *p3d_create_ctorusslice ( char name[20], double R, double r, double angle, int type );
extern p3d_poly *p3d_create_sweptrectslice ( char name[20], double r1, double r2, double height, double angle, double xtop, double ytop, double ztop, double xbot, double ybot, double zbot, int type );
extern p3d_poly *p3d_create_cone ( char name[20], int nvert, double dtop, double dbottom, double height, int type );
extern p3d_poly *p3d_create_snout ( char name[20], int nvert, double dtop, double dbottom, double height, double xoff, double yoff, int type );
extern p3d_poly *p3d_create_skew_snout ( char name[20], int nvert, double dtop, double dbottom, double height, double xoff, double yoff, double ta1, double ta2, double ba1, double ba2, int type );
extern p3d_poly *p3d_create_sphere ( char name[20], double r, int type );
extern p3d_poly *p3d_create_oval ( char name[20], double a, double b, double c, int type );
extern p3d_poly *p3d_create_half_sphere ( char name[20], double r, int type );
extern p3d_poly *p3d_create_sphere_shell ( char name[20], double radius, double h, int type );
extern p3d_poly *p3d_create_half_oval ( char name[20], double a, double b, double c, int type );
extern p3d_poly *p3d_create_tore ( char name[20], double r1, double r2, double a, int type );
extern void p3d_scale_prim ( p3d_poly *poly, double scale );

#endif /* __CEXTRACT__ */
