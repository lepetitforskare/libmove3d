/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void p3d_set_this_robot_pos ( pp3d_rob r, configPt q );
extern void p3d_set_this_robot_pos_deg ( pp3d_rob r, configPt q );
extern void p3d_set_robot_pos ( configPt q );
extern void p3d_set_robot_pos_deg ( configPt q );
extern void p3d_set_this_robot_jnt ( p3d_rob *robotPt, int i, double v );
extern int p3d_set_robot_singularity(p3d_rob *robotPt, int cntrtNum, int *singNum);
extern void p3d_set_robot_jnt ( int i, double v );
extern void p3d_set_robot_jnt_deg ( int i, double v );
extern void p3d_set_robot_dof ( p3d_rob *robotPt, int i, double v );
extern void p3d_set_robot_dof_deg ( p3d_rob *robotPt, int i, double v );
extern void p3d_set_robot_config ( p3d_rob *robotPt, configPt config );
extern void p3d_set_robot_config_without_free_flyers ( p3d_rob *robotPt, configPt config );
extern void p3d_set_robot_config_deg ( p3d_rob *robotPt, configPt config );
extern void p3d_update_this_robot_pos_without_cntrt_and_obj ( p3d_rob *robotPt );
extern void p3d_update_this_robot_pos_without_cntrt ( p3d_rob *robotPt );
extern int p3d_update_this_robot_pos ( p3d_rob *robotPt );
extern int p3d_update_robot_pos ( void );
extern int p3d_set_and_update_this_robot_conf ( p3d_rob * rob, configPt q );
extern int p3d_set_and_update_robot_conf ( configPt q );
extern int p3d_set_and_update_robot_conf_multisol(configPt q, int * ikSol);
extern int p3d_set_and_update_robot_conf_deg ( configPt q );
extern int p3d_set_and_update_this_robot_conf_without_cntrt ( p3d_rob * rob, configPt q );
extern int p3d_set_and_update_this_robot_conf_with_partial_reshoot ( p3d_rob * rob, configPt q );
extern int p3d_update_this_robot_pos_with_partial_reshoot ( p3d_rob *robotPt );
extern int p3d_update_this_robot_pos_multisol ( p3d_rob *robotPt, configPt qp, double dl, int* ikSol );
extern int p3d_set_and_update_this_robot_conf_multisol ( p3d_rob * rob, configPt q, configPt qp, double dl, int* ikSol );
extern void p3d_set_prim_pos ( p3d_poly *poly, double tx, double ty, double tz, double rx, double ry, double rz );
extern void p3d_set_prim_pos_deg ( p3d_poly *poly, double tx, double ty, double tz, double rx, double ry, double rz );
extern void p3d_set_prim_pos_by_mat ( p3d_poly *poly, p3d_matrix4 newpos );
extern void set_thing_pos ( int type, p3d_obj *obst, double tx, double ty, double tz, double rx, double ry, double rz );
extern void p3d_set_obst_pos ( char name[20], double tx, double ty, double tz, double rx, double ry, double rz );
extern void p3d_set_body_pos ( char name[20], double tx, double ty, double tz, double rx, double ry, double rz );
extern void set_obst_pos_by_mat ( p3d_obj *obst, p3d_matrix4 newpos );
extern void p3d_set_obst_pos_by_mat ( char name[20], p3d_matrix4 newpos );
extern void p3d_set_body_pos_by_mat ( char name[20], p3d_matrix4 newpos );
extern void p3d_set_body_abs_pos(char name[20], double tx, double ty, double tz, double rx, double ry, double rz);
extern void p3d_update_robot_jnt_pos ( p3d_jnt * jntPt );
extern void p3d_update_jnt_pos ( p3d_jnt * jntPt );
extern void update_robot_obj_pos ( pp3d_obj o );
extern void rot_trans4 ( p3d_matrix4 M, double tx, double ty, double tz, double rx, double ry, double rz );

#if defined(LIGHT_PLANNER)
extern int p3d_update_carried_object_pos(p3d_rob *robotPt);
#endif

extern int p3d_set_freeflyer_pose(p3d_rob *robotPt, p3d_matrix4 pose);
extern int p3d_set_freeflyer_pose_into(p3d_rob *robotPt, p3d_matrix4 pose, configPt q);
extern int p3d_set_freeflyer_pose2(p3d_rob *robotPt, double x, double y, double z, double alpha, double beta, double gamma);
#endif /* __CEXTRACT__ */
