/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Wed Jun 23 14:30:04 2004
 */
#ifndef __CEXTRACT__

extern int p3d_read_desc ( const char *file );
extern void p3d_set_directory ( char *dir );
extern void p3d_get_directory ( char *dir );
extern void p3d_get_filename ( char *fullname );
extern void p3d_set_filename ( char *fullname );
extern void p3d_convert_axe_to_mat ( p3d_matrix4 M, double * tabd );
extern void p3d_convert_dh_to_mat (p3d_matrix4 M, double * tabd, p3d_jnt * prevJnt);
extern int read_desc (FILE *fd, char* nameobj, double scale, int fileType);
extern int p3d_read_macro ( char *namemac, char *nameobj, double scale );
//extern int read_macro ( FILE *fd, char *nameobj, double scale );
extern int read_macro_ground(FILE *fd,char *nameobj, double scale );
extern int read_desc_type ( FILE *fd, int *type );
extern int read_desc_hyp_type ( FILE *fd, int *n, int *type );
extern int read_desc_name ( FILE *fd, char *name );
extern int read_desc_string ( FILE *fd, char *name );
extern int read_desc_double ( FILE *fd, int n, double *f );
extern int read_desc_line_double ( FILE *fd, int *n, double *dtab );
extern int read_desc_int ( FILE *fd, int n, int *itab );
extern int read_desc_line_int ( FILE *fd, int *n, int *itab );
extern int read_desc_mat ( FILE *fd, p3d_matrix4 mat );
extern int read_desc_mat_scaled ( FILE *fd, p3d_matrix4 mat, double scale );
extern int read_desc_error ( char *msg );
extern void writeRobotDofNames(p3d_rob* robot, char* fileName);

#endif /* __CEXTRACT__ */
