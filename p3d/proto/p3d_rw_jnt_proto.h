/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern int p3d_rw_jnt_get_type_by_name ( const char * name, p3d_type_joint * type );
extern int p3d_rw_jnt_get_type_by_num ( int num, p3d_type_joint * type );
extern const char * p3d_rw_jnt_get_name_by_type ( p3d_type_joint type );
extern int p3d_rw_jnt_get_num_by_type ( p3d_type_joint type );
extern const char * p3d_rw_jnt_get_name_by_num ( int num );
extern p3d_read_jnt_link_data * p3d_rw_jnt_create_joint_link ( void );
extern void p3d_rw_jnt_destroy_joint_link ( p3d_read_jnt_link_data * jnt_linkPt );
extern p3d_read_jnt_data * p3d_create_read_jnt_data ( p3d_type_joint type );
extern void p3d_destroy_read_jnt_data ( p3d_read_jnt_data * data );
extern int p3d_parse_jnt_desc ( FILE * f, char ** line, int * size, int * num_line, p3d_read_jnt_data * data );
extern int p3d_env_beg_jnt_desc ( FILE * f, p3d_type_joint type, double scale );
extern void p3d_rw_jnt_write_jnt_desc ( FILE * f, p3d_jnt * jntPt );
extern int s_p3d_build_jnt_data(p3d_read_jnt_data * data);

#endif /* __CEXTRACT__ */
