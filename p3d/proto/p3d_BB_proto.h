/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void p3d_BB_set_selection_method ( p3d_BB_selection_type type );
extern p3d_BB_selection_type p3d_BB_get_selection_method ( void );
extern void p3d_BB_set_computation_method ( p3d_BB_compute_type type );
extern p3d_BB_compute_type p3d_BB_get_computation_method ( void );
extern void p3d_BB_set_mode_close ( void );
extern void p3d_BB_set_mode_large ( void );
extern void p3d_BB_set_mode_col ( void );
extern void p3d_BB_get_BB_poly1 ( p3d_poly *p, double *x1, double *x2, double *y1, double *y2, double *z1, double *z2 );
extern void p3d_BB_update_BB_obj1 ( p3d_obj *obj, p3d_matrix4 mat );
extern void p3d_BB_init_BB0 ( void );
extern void p3d_BB_update_BB_obj2 ( p3d_obj *obj, p3d_matrix4 mat );
extern void p3d_BB_update_BB_rob ( p3d_rob *rob );
extern int p3d_BB_overlap_obj_obj ( p3d_obj *obj1, p3d_obj *obj2 );
extern int p3d_BB_overlap_rob_obj ( p3d_rob *rob, p3d_obj *obj );
extern int p3d_BB_overlap_rob_rob ( p3d_rob *rob1, p3d_rob *rob2 );
extern double p3d_BB_obj_obj_extern_dist ( p3d_obj *obj1, p3d_obj *obj2, double *dist_ut );
extern p3d_BB_handle * p3d_BB_handle_create ( void );
extern void p3d_BB_handle_destroy ( p3d_BB_handle * handlePt );
extern void p3d_BB_clear ( void );
extern void p3d_BB_set_cur_handle ( p3d_BB_handle * handlePt );
extern p3d_BB_handle * p3d_BB_get_cur_handle ( void );
extern void p3d_BB_activate_pair ( p3d_BB_handle * handlePt, p3d_obj *obj1, p3d_obj *obj2 );
extern void p3d_BB_activate ( p3d_obj *obst );
extern void p3d_BB_deactivate_pair ( p3d_BB_handle * handlePt, p3d_obj *obj1, p3d_obj *obj2 );
extern void p3d_BB_activate_env ( p3d_BB_handle * handlePt, p3d_obj *obj );
extern void p3d_BB_deactivate_env ( p3d_BB_handle * handlePt, p3d_obj *obj );
extern void p3d_BB_deactivate_all ( p3d_BB_handle * handlePt );
extern void p3d_BB_handle_copy_into ( p3d_BB_handle * src_handlePt, p3d_BB_handle * dest_handlePt );
extern p3d_BB_handle * p3d_BB_handle_copy ( p3d_BB_handle * src_handlePt );
extern void p3d_BB_handle_add_into ( p3d_BB_handle * src_handlePt, p3d_BB_handle * dest_handlePt );
extern void p3d_BB_handle_sub_into ( p3d_BB_handle * src_handlePt, p3d_BB_handle * dest_handlePt );
extern void p3d_BB_start ( void );
extern void p3d_BB_stop ( void );
extern void p3d_BB_dist_robot ( p3d_rob *robotPt, double *distances );

#endif /* __CEXTRACT__ */
