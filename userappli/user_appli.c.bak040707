#include "UserAppli-pkg.h"
#include "Planner-pkg.h"
#include "P3d-pkg.h"
#include "Graphic-pkg.h"
#include "Move3d-pkg.h"
#include <time.h>



static configPt qinit = NULL;
static configPt qgoal = NULL;
/*static p3d_list_node *currentListNode = NULL;
static p3d_compco *currentCompco = NULL;
*/
enum {VISRETRACT, ALLPRM, BRIDGEOB};
extern double resultArray[6];
static double resultStorage[200][6];
static char graphName[25][100];
static void p3d_reset_graph(void);
static int testType = VISRETRACT;
/*extern int nbTestDone;
//extern int failFlag;
*/
static void p3d_random_qinit_qgoal(void) {
  pp3d_rob r = (pp3d_rob)p3d_get_desc_curid(P3D_ROBOT);
  p3d_localpath *localpathPt;
  int ntest=0, col;
  qinit = p3d_alloc_config(r);
  qgoal = p3d_alloc_config(r);

  //initialisation de la configuration de départ
  do {
    p3d_standard_shoot(r, qinit,0);
    p3d_set_and_update_this_robot_conf_without_cntrt(r,qinit);
  } while(p3d_col_test());
  p3d_copy_config_into(r,qinit,&(r->ROBOT_POS));

  //initialisation de la configuration d'arrivée
  do {
    do {
      p3d_standard_shoot(r, qgoal);
      p3d_set_and_update_this_robot_conf_without_cntrt(r,qgoal);
    } while(p3d_col_test());
    localpathPt = p3d_local_planner(r,qinit,qgoal);
    col = p3d_unvalid_localpath_test(r, localpathPt, &ntest);
  } while(!col);
  p3d_copy_config_into(r,qgoal,&(r->ROBOT_GOTO));
  //printf("localpath = %d", (p3d_local_planner(r,qinit,qgoal))->valid);

  p3d_set_and_update_robot_conf(qinit);
  g3d_refresh_allwin_active();
  sleep(1);
  p3d_set_and_update_robot_conf(qgoal);
  g3d_refresh_allwin_active();
}

static void p3d_reload_conf(void) {
  pp3d_rob r = (pp3d_rob)p3d_get_desc_curid(P3D_ROBOT);

  p3d_copy_config_into(r,qinit,&(r->ROBOT_POS));
  p3d_set_and_update_robot_conf(qinit);
  g3d_refresh_allwin_active();
  p3d_copy_config_into(r,qgoal,&(r->ROBOT_GOTO));
  p3d_set_and_update_robot_conf(qgoal);
  g3d_refresh_allwin_active();
}

void init_qinit_qgoal(void) {
  pp3d_rob r = (pp3d_rob)p3d_get_desc_curid(P3D_ROBOT);

  qinit = p3d_alloc_config(r);
  qgoal = p3d_alloc_config(r);

  p3d_copy_config_into(r,r->ROBOT_POS,&qinit);
  p3d_copy_config_into(r,r->ROBOT_GOTO,&qgoal);
}

void p3d_compute_tests(void) {
  int i,j, nbnode, k = 0;
  switch (testType) {
    case VISRETRACT: {
        /*printf("===========================================\n");
        printf("VISIBILITY\n");
        printf("===========================================\n");
        p3d_set_MOTION_PLANNER(P3D_ISOLATE_LINKING);
        p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
        p3d_set_SAMPLING_CHOICE(P3D_UNIFORM_SAMPLING);
        for(i = 0; i < 10; i++) {
          for (j = 0; j < 10; j++){
            p3d_reset_graph();
            p3d_set_NB_TRY(i*1000);
            printf("retract nbtry : %d", (i+1)*1000);
            CB_global_search_obj(NULL,0);
            resultStorage[i*10+j][0] = (i+1)*1000;
            resultStorage[i*10+j][1] = resultArray[0];
            resultStorage[i*10+j][2] = resultArray[1];
            resultStorage[i*10+j][3] = resultArray[2];
            resultStorage[i*10+j][4] = resultArray[3];
          }
        }*/
        printf("===========================================\n");
        printf("RETRACT\n");
        printf("===========================================\n");
        p3d_set_MOTION_PLANNER(P3D_ISOLATE_LINKING);
        p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
        p3d_set_SAMPLING_CHOICE(P3D_UNIFORM_SAMPLING);
        p3d_set_test_reductib(1);
        p3d_set_is_visibility_discreet(1);
        for(i = 0; i < 10; i++) {
          for(j = 0; j < 3; j++){
            p3d_reset_graph();
            p3d_set_cycles(0);
            p3d_set_NB_TRY(10000);
            CB_global_search_obj(NULL,0);
            resultStorage[i*10+j+100][3] = resultArray[2];
            printf("retract nbtry : %d * %d\n", (i+1)*100, j);
            p3d_set_cycles(1);
            p3d_set_NB_TRY((i+1)*100);
            CB_global_search_obj(NULL,0);
            resultStorage[i*10+j+100][0] = (i+1)*100;
            resultStorage[i*10+j+100][1] = resultArray[0];
            resultStorage[i*10+j+100][2] = resultArray[1];
            resultStorage[i*10+j+100][4] = resultArray[2] - resultStorage[i*10+j+100][3];
            resultStorage[i*10+j+100][3] = resultArray[2];
            resultStorage[i*10+j+100][5] = resultArray[3];
          }
        }
        printf("-------------------------------------------\n");
        for(i = 0; i < 200; i++) {
//           switch (i) {
//             case (0): printf("Gvis\n"); break;
//             case (100): printf("Gretract\n");break;
//           }
          printf("%f,%f,%f,%f,%f,%f\n",resultStorage[i][0],resultStorage[i][1],resultStorage[i][2],resultStorage[i][3],resultStorage[i][4],resultStorage[i][5]);
        }
        printf("-------------------------------------------\n");
        break;
      }
    case ALLPRM: {
        p3d_set_MOTION_PLANNER(P3D_ALL_PRM);
        p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
        p3d_set_SAMPLING_CHOICE(P3D_UNIFORM_SAMPLING);
        printf("Entrez K :");
        scanf("%d", &k);
        p3d_set_max_connect(k);
        nbnode = 500;
        for (i = 1; i <= 25; i++) {
          p3d_reset_graph();
          p3d_set_NB_NODES(nbnode);
          CB_global_search_obj(NULL,0);
          if (i%5 == 0) {nbnode *= 2;}
          resultStorage[i-1][0] = p3d_get_NB_NODES();
          resultStorage[i-1][1] = resultArray[0];
          resultStorage[i-1][2] = resultArray[2];
          resultStorage[i-1][3] = resultArray[3];
          sprintf(graphName[i-1],"%s%d%s%d%s%d%s","/home/mgharbi/Documents/kprmetroit/",k,"/",p3d_get_NB_NODES(),"/",i%5+1,".graph");
          p3d_write_graph(XYZ_GRAPH,graphName[i-1]);
        }
        //print results
        printf("-------------------------------------------\n");
        printf("k = %d\n", k);
        for(i = 0; i < 25; i++) {
          /* switch (i){
             case (0): printf("Gvis\n"); break;
             case (10): printf("Gretract\n");break;
           }*/
          printf("%s :%f,%f,%f,%f\n", graphName[i], resultStorage[i][0], resultStorage[i][2], resultStorage[i][3], resultStorage[i][4]);
        }
        printf("-------------------------------------------\n");
        break;
      }
    case BRIDGEOB: {
        for(i = 0; i < 30; i++) {
          p3d_random_qinit_qgoal();
          printf("===========================================\n");
          printf("VISIBILITY\n");
          printf("===========================================\n");
          p3d_reset_graph();
          p3d_set_MOTION_PLANNER(P3D_ISOLATE_LINKING);
          p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
          p3d_set_SAMPLING_CHOICE(P3D_UNIFORM_SAMPLING);
          p3d_set_NB_TRY(100000);
          CB_specific_search_obj(NULL,0);
          resultStorage[i*5][0] = resultArray[0];
          resultStorage[i*5][1] = resultArray[2];
          resultStorage[i*5][2] = resultArray[4];
          resultStorage[i*5][3] = resultArray[5];
          printf("===========================================\n");
          printf("BRIDGE\n");
          printf("===========================================\n");
          p3d_reset_graph();
          p3d_reload_conf();
          p3d_set_MOTION_PLANNER(P3D_BASIC);
          p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
          p3d_set_SAMPLING_CHOICE(P3D_BRIDGE_SAMPLING);
          CB_specific_search_obj(NULL,0);
          resultStorage[i*5+1][0] = resultArray[0];
          resultStorage[i*5+1][1] = resultArray[2];
          resultStorage[i*5+1][2] = resultArray[4];
          resultStorage[i*5+1][3] = resultArray[5];
          printf("===========================================\n");
          printf("OBPRM\n");
          printf("===========================================\n");
          p3d_reset_graph();
          p3d_reload_conf();
          p3d_set_MOTION_PLANNER(P3D_BASIC);
          p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
          p3d_set_SAMPLING_CHOICE(P3D_OBPRM_SAMPLING);
          CB_specific_search_obj(NULL,0);
          resultStorage[i*5+2][0] = resultArray[0];
          resultStorage[i*5+2][1] = resultArray[2];
          resultStorage[i*5+2][2] = resultArray[4];
          resultStorage[i*5+2][3] = resultArray[5];
          printf("===========================================\n");
          printf("VIS+BRIDGE\n");
          printf("===========================================\n");
          p3d_reset_graph();
          p3d_reload_conf();
          p3d_set_MOTION_PLANNER(P3D_ISOLATE_LINKING);
          p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
          p3d_set_SAMPLING_CHOICE(P3D_BRIDGE_SAMPLING);
          p3d_set_NB_TRY(100000);
          CB_specific_search_obj(NULL,0);
          resultStorage[i*5+3][0] = resultArray[0];
          resultStorage[i*5+3][1] = resultArray[2];
          resultStorage[i*5+3][2] = resultArray[4];
          resultStorage[i*5+3][3] = resultArray[5];
          printf("===========================================\n");
          printf("VIS+OBPRM\n");
          printf("===========================================\n");
          p3d_reset_graph();
          p3d_reload_conf();
          p3d_set_MOTION_PLANNER(P3D_ISOLATE_LINKING);
          p3d_set_RANDOM_CHOICE(P3D_RANDOM_SAMPLING);
          p3d_set_SAMPLING_CHOICE(P3D_OBPRM_SAMPLING);
          p3d_set_NB_TRY(100000);
          CB_specific_search_obj(NULL,0);
          resultStorage[i*5+4][0] = resultArray[0];
          resultStorage[i*5+4][1] = resultArray[2];
          resultStorage[i*5+4][2] = resultArray[4];
          resultStorage[i*5+4][3] = resultArray[5];
        }

        printf("-------------------------------------------\n");
        for(i = 0; i < 150; i++) {
          printf("%f,%f,%f,%f",resultStorage[i][0],resultStorage[i][1],resultStorage[i][2],resultStorage[i][3]);
          if (i%5 == 4) {
            printf("\n");
          } else {
            printf(",");
          }
        }
        printf("-------------------------------------------\n");
        break;
      }
  }
}

static void p3d_reset_graph(void) {
  p3d_del_graph(XYZ_GRAPH);
  p3d_reinit_array_exhausted_nodes();
  MY_ALLOC_INFO("Apres destruction du graphe");
}
/*
void p3d_single_shoot(void) {}
 
void p3d_previous_node(pp3d_rob r, pp3d_graph G, FL_OBJECT *INPUT_OBJ) {
    char str[sizeof(int)];
    if (currentListNode == NULL) {
        currentListNode = G->nodes;
    } else if(currentListNode->N != G->nodes->N) {
        currentListNode = currentListNode->prev;
        p3d_set_and_update_this_robot_conf_without_cntrt(r,currentListNode->N->q);
        g3d_refresh_allwin_active();
        sprintf(str, "%d", currentListNode->N->num);
        fl_set_input(INPUT_OBJ, str);
        printf("%d\n",currentListNode->N->num);
    }
}
 
void p3d_next_node(pp3d_rob r, pp3d_graph G, FL_OBJECT *INPUT_OBJ) {
    char str[sizeof(int)];
    int i;
    if (currentListNode == NULL)
        currentListNode = G->nodes;
    if (currentCompco == NULL)
        currentCompco = G->comp;
    if (currentListNode != G->last_node && currentCompco != G->last_comp) {
        //     currentListNode = currentListNode->next;
 
        do {
            currentCompco = currentCompco->suiv;
        } while(currentCompco->nnode != 1);
        currentListNode = currentCompco->dist_nodes;
 
        p3d_set_and_update_this_robot_conf_without_cntrt(r,currentListNode->N->q);
        g3d_refresh_allwin_active();
        sprintf(str, "%d", currentListNode->N->num);
        fl_set_input(INPUT_OBJ, str);
    }
}
 
void p3d_draw_current_node(pp3d_rob r, pp3d_graph G, int nodeNum) {
    int i;
    currentListNode = G->nodes;
    for (i = 1; i < MIN(nodeNum,G->nnode); i++) {
        currentListNode = currentListNode->next;
    }
    p3d_set_and_update_this_robot_conf_without_cntrt(r,currentListNode->N->q);
    g3d_refresh_allwin_active();
}
*/
