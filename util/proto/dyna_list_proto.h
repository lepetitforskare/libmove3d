/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void * dbl_copy_link ( void * data );
extern void dbl_delete_link ( void * data );
extern dbl_list * dbl_list_init ( dbl_clone_function clone_func, dbl_destroy_function destroy_func, size_t size );
extern dbl_list * dbl_list_pointer_init ( void );
extern int dbl_list_empty ( dbl_list *l );
extern int dbl_list_is_error ( dbl_list *l );
extern int dbl_list_get_error ( dbl_list *l );
extern void dbl_list_clear_error ( dbl_list *l );
extern void dbl_list_destroy ( dbl_list *l );
extern dbl_list_node * dbl_list_insert_after ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_insert_before ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_append ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_concat ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_add_link ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_insert_link_after ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_insert_link_before ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_append_link ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_concat_link ( dbl_list *l, void *data );
extern dbl_list_node * dbl_list_get_current ( dbl_list *l );
extern void dbl_list_insert_sorted_link(dbl_list *l, void *data, int (*sortFn)(void *, void *));
extern int dbl_list_get_current_indice ( dbl_list *l );
extern dbl_list_node * dbl_list_first ( dbl_list *l );
extern dbl_list_node * dbl_list_last ( dbl_list *l );
extern int dbl_list_more ( dbl_list *l );
extern int dbl_list_no_more ( dbl_list *l );
extern dbl_list_node * dbl_list_next ( dbl_list *l );
extern dbl_list_node * dbl_list_prev ( dbl_list *l );
extern void dbl_list_clear ( dbl_list *l );
extern dbl_list_node * dbl_list_remove ( dbl_list *l );
extern dbl_list_node * dbl_list_remove_link ( dbl_list *l );
extern dbl_list_node * dbl_list_remove_data ( dbl_list *l, void * data );
extern dbl_list_node * dbl_list_remove_link_data ( dbl_list *l, void * data );
extern void dbl_list_remove_first ( dbl_list *l );
extern void dbl_list_remove_last ( dbl_list *l );
extern int dbl_list_swap_next ( dbl_list *l );
extern int dbl_list_swap_prev ( dbl_list *l );
extern dbl_list_node * dbl_list_goto_first ( dbl_list *l );
extern dbl_list_node * dbl_list_goto_last ( dbl_list *l );
extern dbl_list_node * dbl_list_goto_n ( dbl_list *l, int n );
extern void * dbl_list_get_data ( dbl_list *l );
extern dbl_list_node * dbl_list_get_node_n ( dbl_list *l, int n );
extern void * dbl_list_get_data_n ( dbl_list *l, int n );
extern int dbl_list_get_data_indice ( dbl_list *l, void * data );
extern void dbl_list_push ( dbl_list *l );
extern int dbl_list_pop ( dbl_list *l );
extern void dbl_list_flush_stack ( dbl_list *l );
extern dbl_list * dbl_list_copy ( const dbl_list *l );
extern int dbl_list_concat_list ( dbl_list * l_dest, const dbl_list *l_src );
extern int dbl_list_concat_list_link ( dbl_list * l_dest, const dbl_list *l_src );
extern int dbl_list_count ( dbl_list *l );
extern void dbl_list_sort ( dbl_list *l, int (*call_func)(void *, void *) );
extern dbl_list_node * dbl_list_find_by_data ( dbl_list *l, void *data, int (*FctEqualData)(void *, void *) );
extern int dbl_list_test_equal ( dbl_list *list1Pt, dbl_list *list2Pt, int (*FctEqualData)(void *, void *) );
extern int dbl_list_test_included ( dbl_list * main_listPt, dbl_list * sub_listPt, int (*FctEqualData)(void *, void *) );

#endif /* __CEXTRACT__ */
