/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__
#ifdef __STDC__

extern int deltaPrime_off ( FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w );
extern void deltaPrime_over ( FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double u, double *deltaPrime_v, double *deltaPrime_w );
extern int flatHilareAccelCoefficient ( FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff );
extern int flatHilareDeltaPrime ( FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w );
extern int flatTrailerAccelCoefficient ( FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff );
extern void flatTrailerAccelCoefficientTrailer ( FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff );
extern int flatTrailerDeltaPrime ( FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w );

#else /* __STDC__ */

extern int deltaPrime_off (/* FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w */);
extern void deltaPrime_over (/* FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double u, double *deltaPrime_v, double *deltaPrime_w */);
extern int flatHilareAccelCoefficient (/* FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff */);
extern int flatHilareDeltaPrime (/* FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w */);
extern int flatTrailerAccelCoefficient (/* FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff */);
extern void flatTrailerAccelCoefficientTrailer (/* FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *coeff */);
extern int flatTrailerDeltaPrime (/* FLAT_STR *flatPt, FLAT_LOCAL_PATH_STR *pathPt, double localParam, double *ddelta_v, double *ddelta_w */);

#endif /* __STDC__ */
#endif /* __CEXTRACT__ */
