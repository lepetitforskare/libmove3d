/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__
#ifdef __STDC__

extern double angleLimit ( double angle );
extern double curvature ( double *h_deriv, int sens );
extern double curvToPhi ( FLAT_STR *flatPt, double x );
extern double diff2_kappa ( FLAT_STR *flatPt, double phi );
extern double diff2_phi ( FLAT_STR *flatPt, double *h_deriv, int sens );
extern double diff3_phi ( FLAT_STR *flatPt, double *h_deriv, int sens );
extern double diff_kappa ( FLAT_STR *flatPt, double phi );
extern double diff_phi ( FLAT_STR *flatPt, double *h_deriv, int sens );
extern double flatEllipticIntegral ( FLAT_STR *flatPt, double x );
extern void flatGamma ( TR_FLAT_CONFIG_STR *fconf, double s, double deriv_order, double *Tab_gamma );
extern void flatHilareCombination ( TR_FLAT_CONFIG_STR *fconf_initPt, TR_FLAT_CONFIG_STR *finalFlatConfPt, double u, double v2, int deriv_order, double *Tab_gamma );
extern void flatTrailerCombination ( TR_FLAT_CONFIG_STR *fconf_initPt, TR_FLAT_CONFIG_STR *finalFlatConfPt, double u, double v2, double alpha_0, double alpha_1, int deriv_order, double *Tab_gamma );
extern double flatV1 ( TR_FLAT_CONFIG_STR *fconf1, TR_FLAT_CONFIG_STR *fconf2 );
extern double flatV2 ( TR_FLAT_CONFIG_STR *fconf1, TR_FLAT_CONFIG_STR *fconf2 );
extern void flat_conv_curve_fconf ( double *Tab_curve, TR_FLAT_CONFIG_STR *fconf, int sens );
extern double get_max_curvature ( FLAT_STR *flatPt );
extern double kappa ( FLAT_STR *flatPt, double phi );
extern void printTabLocalPathInFile ( FILE *file, FLAT_TAB_LOCAL_PATH *tabLocalPathPt );

#else /* __STDC__ */

extern double angleLimit (/* double angle */);
extern double curvature (/* double *h_deriv, int sens */);
extern double curvToPhi (/* FLAT_STR *flatPt, double x */);
extern double diff2_kappa (/* FLAT_STR *flatPt, double phi */);
extern double diff2_phi (/* FLAT_STR *flatPt, double *h_deriv, int sens */);
extern double diff3_phi (/* FLAT_STR *flatPt, double *h_deriv, int sens */);
extern double diff_kappa (/* FLAT_STR *flatPt, double phi */);
extern double diff_phi (/* FLAT_STR *flatPt, double *h_deriv, int sens */);
extern double flatEllipticIntegral (/* FLAT_STR *flatPt, double x */);
extern void flatGamma (/* TR_FLAT_CONFIG_STR *fconf, double s, double deriv_order, double *Tab_gamma */);
extern void flatHilareCombination (/* TR_FLAT_CONFIG_STR *fconf_initPt, TR_FLAT_CONFIG_STR *finalFlatConfPt, double u, double v2, int deriv_order, double *Tab_gamma */);
extern void flatTrailerCombination (/* TR_FLAT_CONFIG_STR *fconf_initPt, TR_FLAT_CONFIG_STR *finalFlatConfPt, double u, double v2, double alpha_0, double alpha_1, int deriv_order, double *Tab_gamma */);
extern double flatV1 (/* TR_FLAT_CONFIG_STR *fconf1, TR_FLAT_CONFIG_STR *fconf2 */);
extern double flatV2 (/* TR_FLAT_CONFIG_STR *fconf1, TR_FLAT_CONFIG_STR *fconf2 */);
extern void flat_conv_curve_fconf (/* double *Tab_curve, TR_FLAT_CONFIG_STR *fconf, int sens */);
extern double get_max_curvature (/* FLAT_STR *flatPt */);
extern double kappa (/* FLAT_STR *flatPt, double phi */);
extern void printTabLocalPathInFile (/* FILE *file, FLAT_TAB_LOCAL_PATH *tabLocalPathPt */);

#endif /* __STDC__ */
#endif /* __CEXTRACT__ */
