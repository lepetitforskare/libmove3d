/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void p3d_init_stay_within_dist_data ( p3d_stay_within_dist_data * data );
extern int p3d_search_status ( void );
extern void p3d_set_search_status ( int search_status );
extern void p3d_search_verbose ( int flag );
extern int p3d_get_search_verbose ( void );
extern p3d_localpath *p3d_local_planner ( p3d_rob *robotPt, configPt q1, configPt q2 );
extern p3d_localpath *p3d_local_planner_multisol(p3d_rob *robotPt, configPt q1, configPt q2, int* ikSol);
extern p3d_localpath *p3d_local_planner_array ( p3d_rob *robotPt, configPt* q );
extern p3d_localpath *p3d_local_planner_array_multisol ( p3d_rob *robotPt, configPt* q , int* ikSol);
extern int p3d_local_set_planner ( p3d_localpath_type type );
extern p3d_localpath_type p3d_local_get_planner ( void );
extern char * p3d_local_getname_planner ( p3d_localpath_type lpl_type );
extern p3d_localpath_type p3d_local_getid_planner ( const char * name );
extern p3d_localpath* p3d_replace_traj_part ( p3d_localpath* start_trajPt, p3d_localpath* start_old_partPt, p3d_localpath* last_old_partPt, p3d_localpath* new_partPt );
extern double p3d_dist_q1_q2 ( p3d_rob *robotPt, configPt q1, configPt q2 );
extern double p3d_dist_q1_q2_multisol ( p3d_rob *robotPt, configPt q1, configPt q2, int* ikSol );
extern void destroy_list_localpath ( p3d_rob *robotPt, p3d_localpath *localpathPt );
extern p3d_localpath *concat_liste_localpath ( p3d_localpath *list1Pt, p3d_localpath *list2Pt );
extern void lm_destroy_params ( p3d_rob *robotPt, lm_list_param_str *lm_list_paramPt );
extern void lm_destroy_one_params ( p3d_rob *robotPt, lm_list_param_str *lm_list_paramPt );
extern lm_list_param_str *lm_append_to_list ( lm_list_param_str *listPt, void* eltPt, p3d_localpath_type lpl_type );
extern p3d_localpath *p3d_read_localpath ( p3d_rob *robotPt, FILE *file, char *type, double version );
extern int p3d_unvalid_localpath_test ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest );
extern int p3d_unvalid_localpath_classic_test ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern int p3d_unvalid_localpath_separated_classic_test ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath );
extern void p3d_set_localpath_ikSol(p3d_localpath *localpathPt, p3d_rob* robotPt, int* iksol1, int isSing1, int* iksol2, int isSing2);
extern p3d_localpath *append_to_localpath(p3d_localpath *localpath1Pt, p3d_localpath *localpath2Pt);
extern int p3d_connectable_confs(p3d_rob *robot, configPt qStart, configPt qGoal, double * length);

#endif /* __CEXTRACT__ */
