/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void kcd_dist_init_list_aabb ( void );
extern void kcd_dist_set_min_dist ( double d );
extern double kcd_dist_get_min_dist ( void );
extern void kcd_dist_init_min_dist ( void );
extern void kcd_dist_init_closest_points ( void );
extern void kcd_dist_get_closest_points ( kcd_vector3 pointA, kcd_vector3 pointB );
extern void kcd_dist_set_closest_points ( kcd_vector3 pointA, kcd_vector3 pointB );
extern void kcd_set_kcd_exact_epsilon ( double value );
extern double kcd_get_kcd_exact_epsilon ( void );
extern int kcd_gjk_between_2_OBB ( kcd_bb *obbox1, kcd_bb *obbox2, kcd_matrix4 *BwrtA, double *min_distance );
extern void kcd_min_dist_est_between_2_OBB ( kcd_bb *obbox1, kcd_bb *obbox2, kcd_matrix4 BwrtA, double *min_distance );
extern void kcd_max_dist_est_between_2_OBB ( kcd_bb *obbox1, kcd_bb *obbox2, kcd_matrix4 BwrtA, double *max_distance );
extern int kcd_dist_exact_between_2_obbtrees ( kcd_bb *rob_box, kcd_matrix4 invM2, kcd_matrix4 mat2, kcd_matrix4 a_box_pos, kcd_bb *second_box, kcd_matrix4 *THISmat9, kcd_matrix4 *THISmat8, double *distance_estimate, int *nearest_obstacle, int which_trees );
extern int kcd_visit_2_obbtrees ( kcd_bb *rob_box, kcd_matrix4 invM2, kcd_matrix4 mat2, kcd_matrix4 a_box_pos, kcd_bb *second_box, kcd_matrix4 *THISmat9, kcd_matrix4 *THISmat8, double *distance_estimate, double *max_param, double *min_param );
extern int kcd_visit_obbtree_robot ( kcd_bb *rob_box, kcd_matrix4 invM2, kcd_matrix4 mat3, kcd_bb *second_box, double *distance_estimate, double *max_param, double *min_param );
extern int kcd_visit_2_robot_obbtrees ( kcd_bb *rob_box, kcd_matrix4 invM2, kcd_matrix4 mat2, kcd_matrix4 mat1, kcd_matrix4 thisM1, kcd_bb *second_box, kcd_matrix4 *THISmat8, kcd_matrix4 *THISmat9, double *distance_estimate, double *max_param, double *min_param );
extern int filter_min_max_OBB ( kcd_bb *bb1, kcd_bb *bb2 );
extern int filter_min_gjk_OBB ( kcd_bb *obb, double min_gjk_dist );
extern int filter_min_gjk_OBB_with_eps ( kcd_bb *obb, double min_gjk_dist );
extern int filter_min_max_OBB_2 ( double max, double min );
extern int filter_min_gjk_OBB_2 ( double min_obb, double min_gjk_dist );
extern double aabbs_maximum_distance ( int b1_nr, int b2_nr );
extern double aabbs_maximum_square_distance ( int b1_nr, int b2_nr );
extern int kcd_dist_mo_in_collision ( int mobj_id, int bb_id_of_body, double *min_distance );
extern int kcd_dist_test_robot_vs_static_obbs ( int mobj_id, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax, int with_report, double *minimal_distance_estimate, int *nearest_obstacle, int current_bb_id );
extern int kcd_gjk_between_2_OBB_volume_boxes ( kcd_bb *obbox1, kcd_bb *obbox2, kcd_matrix4 MOwrtSO, double *min_distance );
extern int kcd_gjk_between_2_robot_OBB_volume_boxes ( kcd_bb *obbox1, kcd_bb *obbox2, kcd_matrix4 MO1wrtMO2, kcd_matrix4 MO2wrtW, double *min_distance );
extern void kcd_init_distance_exact ( void );
extern void kcd_clean_up_dist ( void );

#endif /* __CEXTRACT__ */
