/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void kcd_get_user_defined_small_volume ( double *val );
extern void kcd_init_user_defined_small_volume ( double val );
extern void kcd_reset_user_defined_small_volume ( void );
extern void kcd_set_user_defined_small_volume ( double val );
extern int kcd_volume_smaller_than_user_defined_small_volume ( double kcd_volume );
extern void init_matrix_zero ( kcd_matrix3 m );
extern void init_vector_zero ( kcd_vector3 m );
extern double compute_tri_area ( tricd_triangle tria );
extern void compute_triangle_moment_and_cij ( tricd_triangle tria, kcd_vector3 triangle_moment, double tri_area, kcd_matrix3 cij );
extern int find_eigen ( double vout[3][3], double dout[3], double a[3][3] );
extern void kcd_get_covariance ( kcd_vector3 momentH, double surf_area, kcd_matrix3 accum_cij, kcd_matrix3 cov_matrix );
extern int kcd_get_eigenvalues ( kcd_matrix3 evecs, kcd_matrix3 cov_matrix );
extern void kcd_get_obb_shape_facets ( double *box_x, double *box_y, double *box_z, kcd_vector3 *center, kcd_vector3 *polyh_the_points, int *nof_the_facet_vertices, kcd_index_p *the_facet_vertices, int nr_facets, int *selected_faces, kcd_matrix3 evecs );
extern void kcd_get_obb_shape_facets_and_triangles ( double *box_x, double *box_y, double *box_z, kcd_vector3 *center, kcd_vector3 *polyh_the_points, int *nof_the_facet_vertices, kcd_index_p *the_facet_vertices, int nr_facets, int *selected_faces, kcd_matrix3 evecs );
extern void kcd_get_obb_shape ( double *box_x, double *box_y, double *box_z, kcd_vector3 *center, kcd_vector3 *polyh_the_points, int nbpts, kcd_matrix3 evecs );
extern void split_and_recurse ( void *m3d_poly_it, int ext_p_id, int ext_obj_id, int *nof_the_facet_vertices, kcd_index_p *the_facet_vertices, int parent_rank_number, kcd_bb_p parent_p, kcd_matrix3 *cij_by_facet, kcd_vector3 *evects, kcd_vector3 momentH, int face_num, int *recursed_facets, kcd_vector3 *facet_moments, double *facet_area, int is_robot, int is_convex );
extern int enclose_convex_set_with_obb_tree ( void *m3d_poly_it, int ext_p_id, int ext_obj_id, int is_robot );
extern int enclose_triangles_from_concave_with_obb_tree ( void *m3d_poly_it, int ext_p_id, int ext_obj_id, int is_robot );

#endif /* __CEXTRACT__ */
