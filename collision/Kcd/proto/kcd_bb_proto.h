/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern kcd_bb *kcd_get_the_kcd_bb ( int rank_in_all_bbs );
extern void get_kcd_bb_aabb ( int kcd_bb, double *x1, double *x2, double *y1, double *y2, double *z1, double *z2 );
extern void get_kcd_bb_center ( int all_bb_nr, double *center_x, double *center_y, double *center_z );
extern void get_kcd_bb_sizes ( int all_bb_nr, double *d_x, double *d_y, double *d_z );
extern double get_kcd_bb_half_size ( int all_bb_nr, int array_index );
extern int get_what_is_inside ( int all_bb_nr );
extern void set_what_is_inside ( int all_bb_nr, int val );
extern int get_entity_type ( int all_bb_nr );
extern void set_entity_type ( int all_bb_nr, int val );
extern int kcd_get_number_of_bbs ( void );
extern int kcd_get_number_of_bbs_to_add ( void );
extern void init_all_bb ( void );
extern void kcd_clean_all_bb ( void );
extern void resize_hash_table_on_bbs ( int extra_size );
extern void make_hash_table_on_bbs ( void );
extern int put_bb_in_all_bb ( kcd_bb_p new_obb );
extern void make_tree_connection ( int child_rank_number, kcd_bb_p parent_p );
extern void make_obb_tree_connection ( kcd_bb_p kid_p, kcd_bb_p parent_p );
extern int get_obbtype_of_j ( int j );

#endif /* __CEXTRACT__ */
