/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void kcd_get_prim_abs_pos ( void *primPt, int can_move, void *placement );
extern void kcd_get_prim_rel_pos ( void *primPt, void *placement );
extern void kcd_get_obj_abs_pos ( int kcd_ext_o, void *placement );
extern void kcd_get_pt ( void *polyPt, int i, double *x, double *y, double *z );
extern void kcd_get_pt_arr ( void *polyPt, void *the_points );
extern unsigned int kcd_get_nb_pts ( void *polyPt );
extern unsigned int kcd_get_nb_fs ( void *polyPt );
extern unsigned int kcd_get_nb_pts_in_f ( void *polyPt, int i );
extern int kcd_get_i_pt_in_f ( void *polyPt, int fid, int pid );
extern void kcd_get_pt_in_f_arr ( void *polyPt, int fid, void *the_points );
extern int kcd_get_poly_entity_type ( void *polyPt );
extern int kcd_poly_is_convex ( void *polyPt );
extern int kcd_facet_is_convex ( void *polyPt, int fid );
extern void kcd_get_solid_r1 ( void *polyPt, double *the_datum );
extern void kcd_get_solid_r2 ( void *polyPt, double *the_datum );
extern void kcd_get_solid_h ( void *polyPt, double *the_datum );
extern void kcd_get_solid_s ( void *polyPt, double *the_datum );
extern void kcd_get_solid_x ( void *polyPt, double *x );
extern void kcd_get_solid_y ( void *polyPt, double *y );
extern void kcd_get_solid_z ( void *polyPt, double *z );
extern void kcd_get_solid_xyz ( void *polyPt, double *x, double *y, double *z );
extern int kcd_get_aabb_on_mo ( int kcd_ext_o, double *x1, double *x2, double *y1, double *y2, double *z1, double *z2 );
extern void kcd_get_scene_size ( double *x, double *y, double *z );

#endif /* __CEXTRACT__ */
