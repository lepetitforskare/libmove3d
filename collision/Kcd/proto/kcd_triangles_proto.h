/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern int kcd_tri_get_normal ( kcd_vector3 *the_points, int *facet_i_pts, int nb_points, double *A, double *B, double *C );
extern int kcd_tri_get_a_triangle_vertex ( int triangle_nr, int vertex_nr );
extern int kcd_tri_angulate_facet_p ( kcd_vector3 *the_points, int *facet_i_pts, int nb_points, int nr_triangles, tricd_triangulation *tricd_decomp_p );
extern int kcd_tri_angulate_facet_p_i ( kcd_vector3 *the_points, int *facet_i_pts, int nb_points, int nr_triangles, tricd_triangulation *tricd_decomp_p, output_triangle_p *triangle_id_list_p );
extern int kcd_tri_angulate_facet2 ( kcd_vector3 *the_points, int *facet_i_pts, int nb_points, int nr_triangles, tricd_triangulation *tricd_decomp_p, output_triangle_p *triangle_id_list_p, int fill_triangle_id_list );
extern int kcd_tri_angulate_simple_polygon ( kcd_vector3 *the_points, int *facet_i_pts, int nb_points, int *nr_triangles );

#endif /* __CEXTRACT__ */
