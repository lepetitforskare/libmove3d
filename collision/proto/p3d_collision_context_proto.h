/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern void p3d_col_pair_activate_col_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_activate_dist_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_activate_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_activate_col_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_activate_dist_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_activate_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_deactivate_col_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_deactivate_dist_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_deactivate_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern void p3d_col_pair_deactivate_col_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_deactivate_dist_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_deactivate_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_deactivate_all ( p3d_collision_pair * pair );
extern int p3d_col_pair_is_test_col_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern int p3d_col_pair_is_calc_dist_env ( p3d_collision_pair * pair, p3d_obj * obj );
extern int p3d_col_pair_is_test_col_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern int p3d_col_pair_is_calc_dist_pair ( p3d_collision_pair * pair, p3d_obj * obj1, p3d_obj * obj2 );
extern void p3d_col_pair_add_into ( p3d_collision_pair * src_pair, p3d_collision_pair * dest_pair );
extern void p3d_col_pair_sub_into ( p3d_collision_pair * src_pair, p3d_collision_pair * dest_pair );
extern void p3d_col_pair_copy_into ( p3d_collision_pair * src_pair, p3d_collision_pair * dest_pair );
extern p3d_collision_pair * p3d_col_pair_create ( void );
extern p3d_collision_pair * p3d_col_pair_copy ( p3d_collision_pair * pair );
extern void p3d_col_pair_destroy ( p3d_collision_pair * pair );
extern p3d_collision_pair * p3d_col_pair_get_cur ( void );
extern void p3d_col_pair_copy_current_into ( p3d_collision_pair * pair );
extern p3d_collision_pair * p3d_col_pair_copy_current ( void );
extern void p3d_col_pair_put ( p3d_collision_pair * pair );
extern void p3d_col_pair_push ( void );
extern void p3d_col_pair_push_and_put ( p3d_collision_pair * pair );
extern void p3d_col_pair_pop ( void );
extern void p3d_col_pair_flush ( void );
extern void p3d_col_pair_clear ( void );
extern void p3d_col_pair_start ( void );
extern void p3d_col_pair_stop ( void );
extern void p3d_col_context_add_elem ( p3d_collision_context ** list_begin, void * param, p3d_collision_pair * pair );
extern void p3d_col_context_merge_elem ( p3d_collision_context ** list_begin, void * param, p3d_collision_pair * pair );
extern void p3d_col_context_del_elem ( p3d_collision_context ** list_begin, void * param, p3d_collision_pair * pair );
extern void p3d_col_context_del_param ( p3d_collision_context ** list_begin, void * param );
extern p3d_collision_context * p3d_col_context_copy ( p3d_collision_context *list_begin );
extern void p3d_col_context_destroy ( p3d_collision_context ** list_begin );
extern void p3d_col_context_add ( p3d_collision_context * src_context, p3d_collision_context ** dest_context );
extern p3d_collision_pair * p3d_col_context_sub ( p3d_collision_context * src_context, p3d_collision_context * dest_context );

#endif /* __CEXTRACT__ */
