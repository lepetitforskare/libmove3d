/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern int p3d_filter_mechanism_requested ( void );
extern void p3d_filter_switch_filter_mechanism ( int waarde );
extern void p3d_filter_set_current_robot_nr ( int waarde );
extern void p3d_filter_setoff_linkfilter ( void );
extern void p3d_filter_seton_linkfilter ( void );
extern void p3d_filter_set_draw_robot_box ( int i );
extern int must_draw_robot_box ( void );
extern void p3d_filter_switch_draw_robot_box ( void );
extern int p3d_get_robotboxlist ( void );
extern void p3d_set_robotboxlist ( int newvalue );
extern void p3d_reset_robotboxlist ( void );
extern void p3d_set_filterbox ( double x1, double x2, double y1, double y2, double z1, double z2 );
extern void p3d_get_filter_box ( double *x1, double *x2, double *y1, double *y2, double *z1, double *z2 );
extern void p3d_filter_init_filter ( void );
extern void p3d_filter_init_robot_box ( void );
extern void p3d_filter_set_current_active_link ( int linknb );
extern int p3d_filter_relevant_pair ( p3d_poly *objn );
extern int p3d_filter_relevant_facet ( p3d_poly *current_polyhedron, int facet_nr, int type );
extern int p3d_filter_relevant_poly ( p3d_poly *objn );
extern int p3d_filter_needs_init ( void );
extern void p3d_filter_cleanup ( void );

#endif /* __CEXTRACT__ */
