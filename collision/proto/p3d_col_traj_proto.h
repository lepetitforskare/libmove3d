/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

#include <vector>
extern std::vector<double> aveBBDist;

extern void p3d_col_set_microcollision ( int value );
extern int p3d_col_get_microcollision ( void );
extern int change_position_robot_without_obj ( p3d_rob *robotPt, p3d_localpath *localpathPt, double l );
extern int change_position_robot_without_obj_multisol ( p3d_rob *robotPt, p3d_localpath *localpathPt, double l, double dl, configPt qp );
extern int change_position_robot_multisol( p3d_rob *robotPt, p3d_localpath *localpathPt, double l, double dl, configPt qp );
extern void p3d_reset_current_q_inv(p3d_rob *robotPt);
extern void p3d_set_current_q_inv(p3d_rob *robotPt, p3d_localpath *localpathPt, configPt q_inv);
extern int p3d_get_current_q_inv(p3d_rob *robotPt, configPt q_invPt);

extern int p3d_col_test_localpath_classic ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern int p3d_col_test_localpath_classic_multisol ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern int p3d_col_and_cntrts_test_localpath_classic ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern int p3d_col_and_cntrts_test_localpath_classic_multisol ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern int p3d_onlycol_test_localpath_classic ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest, double *Kpath, configPt *q_atKpath );
extern void p3d_col_env_free_memory_traj_col_tab ( void );
extern void p3d_col_env_set_traj_method ( p3d_traj_test_type type );
extern p3d_traj_test_type p3d_col_env_get_traj_method ( void );
extern int p3d_col_test_localpath ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest );
extern int p3d_col_test_traj ( p3d_rob *robotPt, p3d_localpath *localpathPt, int *ntest );

//start path deform
extern int p3d_test_visibility_edge(p3d_rob *robotPt, configPt q0, configPt q_edge1,configPt q_edge2);
//end path deform

extern int p3d_test_config_continuity(p3d_rob *robotPt, configPt qprev, configPt qcur);

extern int p3d_test_localpath_pb_continuity(p3d_rob *robotPt, p3d_localpath *localpathPt);


#endif /* __CEXTRACT__ */
