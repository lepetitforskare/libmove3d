/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */
#ifndef __CEXTRACT__

extern p3d_graph * p3d_allocinit_graph ( void );
extern p3d_compco * p3d_create_void_compco ( p3d_graph * G );
extern p3d_node * p3d_allocinit_node ( void );
extern void p3d_create_compco ( p3d_graph *G, p3d_node *N );
extern int p3d_del_graph ( p3d_graph *G );
extern void p3d_remove_compco ( p3d_graph * G, p3d_compco * CDel );
extern void p3d_insert_node_in_graph ( p3d_graph *G, p3d_node *nodePt );
extern p3d_list_node * p3d_add_node_to_list ( p3d_node * N, p3d_list_node * TargetList );
extern void p3d_add_node_compco ( p3d_node * N, p3d_compco * C );
extern int p3d_compco_linked_to_compco ( p3d_compco * Source, p3d_compco * Target );
extern p3d_list_compco * p3d_add_list_compco ( p3d_list_compco * CLTarget, p3d_compco * CAdd );
extern void p3d_add_compco_to_reachable_list ( p3d_compco * Target, p3d_compco * Add );
extern void p3d_add_compco_to_reachable_list_and_update_predecessors ( p3d_graph * G, p3d_compco * CTarget, p3d_compco * CAdd );
extern void p3d_del_compco_from_reachable_list ( p3d_compco * CTarget, p3d_compco * CDel );
extern p3d_list_node * p3d_add_node_to_list_node_nof_connex_order ( p3d_node * NAdd, p3d_list_node * NLTarget );
extern void p3d_add_node_neighbour ( p3d_graph *G, p3d_node *N1, p3d_node *N2 );
extern void p3d_create_one_edge ( p3d_graph *G, p3d_node *Ni, p3d_node *Nf, double dist );
extern void p3d_create_edges ( p3d_graph *G, p3d_node *N1, p3d_node *N2, double dist );
extern void p3d_order_node_list ( p3d_list_node * NodeList );
// extern void p3d_order_node_list_multisol(p3d_graph *G, p3d_list_node * NodeList, p3d_node * N);
// extern void p3d_order_node_list2 ( p3d_list_node * NodeList, p3d_list_node * min, p3d_list_node * max );

//start path deform
extern void p3d_clear_comp(p3d_graph *G, p3d_compco* comp);
extern void p3d_compute_2D_Cspace_proj(p3d_rob* robotPt, int dof1, int dof2, int nstep);
extern int p3d_is_node_useful_for_cycle(p3d_node* nodePt, p3d_node** node_to_connect1Pt, p3d_node** node_to_connect2Pt, p3d_graph *graphPt);
extern int p3d_test_reductibility(p3d_graph *G, p3d_node *N, p3d_node * node1Pt, p3d_node * node2Pt);
extern int p3d_is_node_in_list(p3d_list_node* list_nodes, p3d_node* nodePt);
extern dbl_list* p3d_list_nodes_visible(p3d_graph* graphPt, p3d_list_node* nodesPt, p3d_node* N);
extern int p3d_is_visible_connectivity(p3d_graph* graphPt,  dbl_list* list_nodes, p3d_node* nodePt, dbl_list* list_connect_nodes);
extern p3d_node* find_nearest_node(p3d_graph* graphPt, p3d_node* nodePt, dbl_list* list_nodes);
extern int p3d_test_visible_connectivity(p3d_graph* graphPt,  dbl_list* list_nodes, 
                                         p3d_node* nodePt,  dbl_list* list_connect_nodes, int test_faces);
extern int p3d_test_discreet_visibility_edge(p3d_graph* G, configPt q0,
                                             configPt q_edge1,configPt q_edge2);
//end path deform
extern int p3d_fail_stop(int *fail, int ikLayer, int init);
#endif /* __CEXTRACT__ */
