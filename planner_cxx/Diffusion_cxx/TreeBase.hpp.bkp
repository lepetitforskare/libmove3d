/*
 * BasicTree.hpp
 *
 *  Created on: Jul 24, 2009
 *      Author: jmainpri
 */

#ifndef TREEBASE_HPP_
#define TREEBASE_HPP_

#include "../../qtWindow/qtBase/env.hpp"
#include "../planner/PlanningAPI/planningAPI.hpp"
#include "Expansion/BaseExpansionMethod.hpp"

#include "traj.h"
#include "roadmap.h"

#include <tr1/memory>

/**
 * @ingroup CPPPlanner
 * @defgroup Diffusion Diffusion planning
 * @brief Diffusion planning algorithm are methods that grow trees in high dimensional C-Space
 */

/**
 * @ingroup Diffusion
 * @brief Base class for tree planners
 *	This class is a base for EST and RRT planner both mono and by directional
 */

class TreeBase {

public:
	TreeBase();
	TreeBase(p3d_graph* G, int (*stop_func)(), void (*draw_func)());
	~TreeBase();

	void reset();
	bool trajFound();
	void writeTrajectoryPdbs(std::string filename, double granularity, Dist* dist);

protected:

	std::tr1::shared_ptr<Configuration> diffuseOneConf(std::tr1::shared_ptr<Configuration> qCurrent);

	void connectNodeToComp(Node* node, Node* compNode);

	int expandProcess(Node& expansionNode,
			std::tr1::shared_ptr<Configuration> directionConfig,
			Node* directionNode,
			Env::expansionMethod method);

	void addCycles(Node& node);

	Node* insertNode(std::tr1::shared_ptr<Configuration> q,
			Node* expansionNode,
			double expansionDist,
			double currentCost);

	Node* connectNode(Node* currentNode,
			Localpath& path,
			double pathDelta,
			Node* directionNode,
			double currentCost,
			int& nbCreatedNodes);

	void checkStopByWeight(Node* n);

	bool costTestSucceeded(Node* previousNode,
			Configuration& currentConfig,
			double currentCost);

	void adjustTemperature(bool accepted, Node* node);

	void costConnectNodeToComp(Node* node,
			Node* compNode);

	bool costTestSucceededConf(
			std::tr1::shared_ptr<Configuration>& previousConfig,
			std::tr1::shared_ptr<Configuration>& currentConfig,
			double temperature);

	bool ExpandToGoal(Node& expansionNode,
			std::tr1::shared_ptr<Configuration> directionConfig, Node* directionNode,
			Env::expansionMethod method);

	bool ExpandCostConnect(Node& expansionNode,
			std::tr1::shared_ptr<Configuration> directionConfig,
			Node* directionNode,
			Env::expansionMethod method,
			bool toGoal);

	int passiveExpandProcess(Node* expansionNode, int NbActiveNodesCreated, Node* directionNode);

	// Fonction de test d'expansion vers le But
	double adjustTemperature(bool accepted,double temperature);



//TODO Members private
protected:
	BaseExpansionMethod* Expansion;

	int mConsecutiveFailures;

	int (*_stop_func)();
	void (*_draw_func)();

	Robot* mRobot;

	Graph* mGraph;

	Node* mStart;
	Node* mGoal;
};

#endif /* BASICTREE_HPP_ */
