# DO NOT MODIFY THIS FILE
# USE Init.make.move3d.custom INSTEAD


# Compilation avec le module personnage
ANIMATION = 0

# Compilation avec le module Bio
# note: don't change, compilation without BIO is currently broken.
BIO = 1

# Compilation avec le module Bio-Energy
ENERGY = 0

# Compilation avec le module Multi-Graph
MULTIGRAPH = 0

# Compilation avec le module Multi-Localpath
MULTILOCALPATH = 0

# Human Robot Interaction planner module for Move3D
HRI_PLANNER = 0

# pour utiliser le module de planification de prises:s
# grasp planning module:
GRASP_PLANNING = 0

# to use the automatic generation of forward kinematics constraints (reciprocal of the closed chained constraints):
FK_CNTRT = 0


# C++ Planning API And Qt Library
#-----------------------------------------------------

# Compiles the planning API and planners
CXX_PLANNER = 0

# Sets the planning API to be default in Move3D
USE_CXX_PLANNER = 0
LIST_OF_PLANNERS = 0

# Sets QtLibrary compiling mode
QT_LIBRARY = 0
QT_GL = 0
QT_OPENGL_SIDE = 0
QT_UI_XML_FILES = 0
QWT = 0

#-----------------------------------------------------

# if KCD_CP_IS_SOLID is 1, convex polyhedron as a solid instead of as a collection of convex facets in KCD
KCD_CP_IS_SOLID = 0

# test with AABB around body of robot if KCD_USE_P3D_BODY_AABB is 1
KCD_USE_P3D_BODY_AABB = 1

# KCD with volume: also apply to robot iff KCD_APPROX_ROBOT is 1
KCD_APPROX_ROBOT = 0

# pour compiler avec gjk afin de le debugger
GJK = 0

# Compilation avec la bibliotheque de detection de collision PQP (Proximity Query Package):
# To compile with PQP (Proximity Query Package) collision library:
PQP = 0

# write a file with OBB tree information (just for debugging)
OBB_EVAL = 0

# compile Move3D with vcollide
VCOLLIDE = 0

# Mathematic Library
USE_GSL = 1
USE_CLAPACK = 0

# if set to 1, C files are compiled with the C++ compiler
COMPILE_AS_CXX = 1

#Extern Mode (Use this mode to have a scriped functions for planning pick and place tasks)
LIGHT_PLANNER = 0

#Dynamic planning using grids
DPG = 0

# Compilation avec planar shadow (pour avoir les ombres)
PLANAR_SHADOWS = 1
##############################################################################

include $(CURDIR)/../../Init.make.move3d.custom

# declaration de base des repertoires de move3d

HOME_SRC  = $(CURDIR)/../..
VPATH := $(HOME_SRC)

MOVE3D_MODULES += MOVE3D USER PLANNER DIFFUSION ASTAR DFS GROUNDHEIGHT LOCALPATH COLLISION P3D KCD UTIL GRAPHIC

LIB_MOVE3D  = libmove3d.a
LIB_USER = libuser.a
LIB_PLANNER = libplanner.a
LIB_DIFFUSION = libdiffusion.a
LIB_ASTAR = libastar.a
LIB_DFS = libdfs.a
LIB_GROUNDHEIGHT = libgroundHeight.a
LIB_LOCALPATH = liblocalpath.a
LIB_COLLISION = libcol.a
LIB_P3D  = libp3d.a
LIB_KCD = libkcd.a
LIB_UTIL = libutil.a
LIB_GRAPHIC = libgraphic.a
LIB_QT_GUI_FILES = libqtuifiles.a

ifeq (1,$(HRI_PLANNER))
MOVE3D_LIBS = $(LIB_MOVE3D) $(LIB_USER) $(LIB_PLANNER) $(LIB_ASTAR) $(LIB_DFS) $(LIB_DIFFUSION) $(LIB_GROUNDHEIGHT) $(LIB_LOCALPATH) $(LIB_COLLISION) $(LIB_P3D) $(LIB_KCD) $(LIB_HRI_PLANNER) $(LIB_UTIL) $(LIB_GRAPHIC)
else
MOVE3D_LIBS = $(LIB_MOVE3D) $(LIB_USER) $(LIB_PLANNER) $(LIB_ASTAR) $(LIB_DFS) $(LIB_DIFFUSION) $(LIB_GROUNDHEIGHT) $(LIB_LOCALPATH) $(LIB_COLLISION) $(LIB_P3D) $(LIB_KCD) $(LIB_UTIL) $(LIB_GRAPHIC)
endif

CPPFLAGS += -I$(HOME_SRC)/include -I$(HOME_SRC)/bin/$(HOSTTYPE) -I$(HOME_SRC)
CPPFLAGS += -DKCD_MOVE3D

CPPFLAGS += $(SILENT)


#---
# RAPID (part of VCOLLIDE)
#---
ifeq (1,$(VCOLLIDE))
CPPFLAGS += -DVCOLLIDE_ACT
CPPFLAGS += -I$(HOME_SRC)/collision/Vcollide/RAPID
VPATH := $(VPATH):$(HOME_SRC)/collision/Vcollide/RAPID

SRC_RAPID = \
	RAPID.C \
	overlap.C \
	build.C \
	sample_client_cplusplus.C \
	collide.C
endif

#---
# VCOLLIDE
#---
ifeq (1,$(VCOLLIDE))
CPPFLAGS += -I$(HOME_SRC)/collision/Vcollide/src
VPATH := $(VPATH):$(HOME_SRC)/collision/Vcollide/src

SRC_VCOLLIDE = \
	PairData.C \
	NBody.C \
	VCollide.C \
	VInternal.C
endif

#---
# KCD
#---
VPATH := $(VPATH):$(HOME_SRC)/collision/Kcd

SRC_KCD =  \
	kcd_api.c \
	kcd_tables.c \
	kcd_triangles.c \
	kcd_api_report.c \
	kcd_aabb_tree.c \
	kcd_obb_polyh.c \
	kcd_obb_bb.c \
	kcd_bb_init.c \
	kcd_obb.c \
	kcd_aabb.c \
	kcd_dist.c \
	kcd_aabb_polyh.c \
	kcd_obb_overlap.c \
	kcd_bb.c \
	kcd_api_fcts.c \
	kcd_obb_api_gjk.c \
	kcd_gjk_debug.c \
	kcd_gjk_support.c \
	kcd_gjk.c \
	kcd_matrix.c


#---
# PQP
#---
ifeq (1,$(PQP))
MOVE3D_MODULES += PQP
LIB_PQP = libPQP.a
MOVE3D_LIBS += $(LIB_PQP)
CPPFLAGS += -DPQP
VPATH := $(VPATH):$(HOME_SRC)/collision/PQP

SRC_PQP =  \
	PQP.cpp \
	BV.cpp \
  Build.cpp \
  TriDist.cpp

endif

#---
# CDs
#---
VPATH := $(VPATH):$(HOME_SRC)/collision

SRC_COLLISION = \
	p3d_kcd.c \
	p3d_col.c \
	p3d_col_env.c \
	p3d_col_traj.c \
	p3d_filter.c \
	p3d_v_collide.c \
	p3d_triangles.c \
	p3d_collision_context.c \
	coltestcomp.c \
  p3d_pqp.c \
	$(SRC_RAPID) \
	$(SRC_VCOLLIDE) \

#---
# P3D
#---
VPATH := $(VPATH):$(HOME_SRC)/p3d

SRC_P3D = \
	env.cpp \
	p3d_rw_util.c \
	p3d_config.c \
	p3d_del.c \
	p3d_info.c \
	p3d_set.c \
	p3d_setpos.c \
	p3d_env.c \
	p3d_prim.c \
	p3d_rw_env.c  \
	p3d_rw_traj.c  \
	p3d_rw_scenario.c  \
	p3d_get.c \
	p3d_poly.c \
	polyhedre.c \
	p3d_matrix.c \
	p3d_constraints.c \
  p3d_human_arm_ik.c \
	p3d_jacobian.c \
	p3d_autocol.c \
	p3d_halton.c \
	p3d_joints.c \
	p3d_jnt_translate.c \
	p3d_jnt_fixed.c \
	p3d_jnt_rotate.c \
	p3d_jnt_base.c \
	p3d_jnt_freeflyer.c \
	p3d_jnt_plan.c \
	p3d_jnt_knee.c \
	p3d_rw_jnt.c \
	p3d_BB.c \
	p3d_ik.c \
	p3d_rlg.c \
	p3d_parallel.c \
	p3d_ik_kuka.c \
	p3d_ik_pa10.c

#---
# Planner
#---
VPATH := $(VPATH):$(HOME_SRC)/planner
VPATH := $(VPATH):$(HOME_SRC)/planner/rwGraph
VPATH := $(VPATH):$(HOME_SRC)/planner/3DGrid
VPATH := $(VPATH):$(HOME_SRC)/planner/3DGrid/GridToGraph

SRC_PLANNER = \
	p3d_set_param.c \
	p3d_sample.c \
	p3d_graph.c \
	p3d_graph_utils.c \
	p3d_graph_api.c \
	p3d_graph_quality.c \
	p3d_graph_in_grid.c \
	p3d_trajectory.c \
	p3d_optim.c \
	p3d_elastic.c \
	p3d_potential.c \
	p3d_SelectedDistConfig.c \
	p3d_NodeAndCompTools.c \
	p3d_NodeWeight.c \
        p3d_multiGraph.c \
        p3d_hriCost.c \
	p3d_rw_graph.c \
        p3d_rwXmlGraph.c \
        p3d_writeDefaultGraph.c \
        p3d_writeMultiGraph.c \
        p3d_readDefaultGraph.c \
        p3d_readMultiGraph.c


#---
# Astar
#---
VPATH := $(VPATH):$(HOME_SRC)/planner/astar

SRC_ASTAR = \
  p3d_astar.c \
  p3d_graphSearch.c \
  p3d_astarDefaultGraph.c \
  p3d_astarMgGraph.c

#---
# Deep-First Search (DFS)
#---
VPATH := $(VPATH):$(HOME_SRC)/planner/dfs

SRC_DFS = \
  p3d_dfs.cpp \
  p3d_dfsDefaultGraph.cpp \
  p3d_dfsMgGraph.cpp


#---
# Groundheight
#---
VPATH := $(VPATH):$(HOME_SRC)/groundHeight/src

SRC_GROUNDHEIGHT = \
	groundHeight.cpp \
	groundWrapper.cpp

#---
# Diffusion
#---
VPATH := $(VPATH):$(HOME_SRC)/planner/Diffusion

SRC_DIFFUSION = \
	p3d_Diffusion.c \
	p3d_ExpansionDirection.c \
	p3d_ExpansionNode.c \
	p3d_ExpansionProcess.c \
	p3d_Frames.c \
	p3d_DynamicDomain.c \
	p3d_ManhatExpand.c \
	p3d_Shell.c \
	p3d_SpaceCost.c

#---
# Planner C++
#---
ifeq (1,$(CXX_PLANNER))
MOVE3D_MODULES += PLANNER_CXX
LIB_PLANNER_CXX = libplannercxx.a
MOVE3D_LIBS += $(LIB_PLANNER_CXX)
CPPFLAGS += -DCXX_PLANNER

VPATH := $(VPATH):$(HOME_SRC)/planner_cxx
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/Diffusion
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/Diffusion/Expansion
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/Diffusion/RRT-Variants
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/PRM
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/Greedy
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/HRICost

VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/3DGrid
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/3DGrid/GridToGraph
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/3DGrid/Hri
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Search
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Search/AStar
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Search/Dijkstra
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/ConfigSpace
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Device
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Roadmap
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Roadmap/search
VPATH := $(VPATH):$(HOME_SRC)/planner_cxx/API/Trajectory

VPATH := $(VPATH):$(HOME_SRC)/userappli/CppApi

SRC_PLANNER_CXX = \
        project.cpp \
        scene.cpp \
	robot.cpp \
	configuration.cpp \
	localpath.cpp \
	node.cpp \
	edge.cpp \
	graph.cpp \
  	testModel.cpp \
	trajectory.cpp \
	BaseOptimization.cpp \
	CostOptimization.cpp \
	planner.cpp \
	TreePlanner.cpp \
	BaseExpansion.cpp \
	TreeExpansionMethod.cpp \
	TransitionExpansion.cpp \
	ManhattanLike-RRT.cpp \
	Transition-RRT.cpp \
	RRT.cpp \
	EST.cpp \
	ACR.cpp \
	PRM.cpp \
	Visibility.cpp \
	plannerFunctions.cpp \
	GreedyCost.cpp \
	HriCost.cpp \
	SaveContext.cpp \
        dijkstra.cpp \
        AStar.cpp \
        State.cpp \
        GraphState.cpp \
        cell.cpp \
        grid.cpp \
        gridtograph.cpp \
        celltonode.cpp \
        HriGridState.cpp \
        HriCell.cpp \
        HriGrid.cpp
endif

ifeq (1,$(HRI_PLANNER))
	SRC_PLANNER_CXX += \
		HriTaskSpaceCost.cpp
endif

##############################################################################
ifeq (1,$(QT_LIBRARY))

#---
# Qt Window (needs Meta Object Compiler)
#---
MOVE3D_MODULES += QT_WIN
LIB_QT_WIN = libqtwin.a
MOVE3D_LIBS += $(LIB_QT_WIN)
CPPFLAGS += -DQT_LIBRARY

VPATH := $(VPATH):$(HOME_SRC)/qtWindow
VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtBase
VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtMyWindows

SRC_QT_WIN = \
	qtMainWindow.cpp \
	qt_widgets.cpp \
	qtBaseWindow.cpp \
	SpinBoxSliderConnector_p.cpp \
	qtColisionTestWindow.cpp \
	qtDiffusionWindow.cpp \
	qtPRMWindow.cpp \
	qtHriWindow.cpp \
	qtOptimWindow.cpp \
	qtTestWindow.cpp \
	qtVisuWindow.cpp \
	qtGreedyWindow.cpp \
	cppToQt.cpp

#---
# Qwt (Plot, histogram etc...)
#---

ifeq (1,$(QWT))
MOVE3D_MODULES += QWT
LIB_QT_WIN = libqwt.a
MOVE3D_LIBS += $(LIB_QWT)
CPPFLAGS += -DQWT

VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtPlot
VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtHisto
VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtMainInterface

SRC_QWT = \
        dataPlot.cpp \
        basicPlot.cpp \
		plotWin.cpp \
        histogramItem.cpp \
		histoWin.cpp \
		plotwindow.cpp

endif

#---
# Qt OpenGL
#---

ifeq (1,$(QT_GL))
MOVE3D_MODULES += QT_OPENGL_WIN
LIB_QT_WIN = libqtopenglwin.a
MOVE3D_LIBS += $(LIB_QT_OPENGL_WIN)
CPPFLAGS += -DQT_GL

ifeq (1,$(QT_OPENGL_SIDE))
CPPFLAGS += -DQT_OPENGL_SIDE
endif

VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtOpenGL

SRC_QT_OPENGL_WIN = \
	glwidget.cpp \
	qtGLWindow.cpp \
	g3dQtConnection.cpp

endif


#---
# UI Files generated by QtDesigner or QtCreator
#---

ifeq (1,$(QT_UI_XML_FILES))
MOVE3D_MODULES += QT_GUI_FILES
MOVE3D_LIBS += $(LIB_QT_GUI_FILES)
CPPFLAGS += -DQT_UI_XML_FILES

VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtMainInterface
VPATH := $(VPATH):$(HOME_SRC)/qtWindow/qtFormRobot

SRC_QT_GUI_FILES = \
        sidewindow.cpp \
		mainwindow.cpp \
		kcdpropertieswindow.cpp \
        moverobot.cpp \
        qdebugstream.cpp
	
endif

endif
##############################################################################

#---
# Localpath
#---
VPATH := $(VPATH):$(HOME_SRC)/localpath/flat/src:$(HOME_SRC)/localpath:$(HOME_SRC)/other_libraries/gbM/src:$(HOME_SRC)/other_libraries/softMotion/src
SRC_FLAT = \
	init_flat.c \
	general_flat.c \
	kinematic_flat.c

SRC_LOCALPATH = \
	rs_dist.c \
	rs_curve.c \
	p3d_local.c \
	p3d_linear.c \
	p3d_reeds_shepp.c \
	p3d_manhattan.c \
	p3d_trailer.c \
	p3d_hilare_flat.c \
	gb.c \
	gbModeles.c \
	debug.c \
	matrix.c \
	softMotion.c \
 	p3d_softMotion.c \
	$(SRC_FLAT)



ifeq (1,$(MULTILOCALPATH))

SRC_LOCALPATH += \
	p3d_multiLocalPath.c
endif



#---
# Util
#---
VPATH := $(VPATH):$(HOME_SRC)/util

SRC_UTIL = \
	p3d_angle.c \
	basic_alloc.c \
	string_util.c \
	time.c \
	dyna_list.c \
	ebt.c \
	gnuplot.c \
	stat.c \
	UdpClient.cpp

#---
# Graphics
#---
VPATH := $(VPATH):$(HOME_SRC)/graphic

SRC_GRAPHIC = g3d_window.c \
	g3d_kcd_draw.c \
	g3d_draw.c \
	g3d_draw_env.c \
	g3d_draw_graph.c\
	g3d_draw_traj.c\
	g3d_draw_ui.c

#---
# Move3D Interface
#---
VPATH := $(VPATH):$(HOME_SRC)/move3d

SRC_MOVE3D = \
	FORMsteering.c \
	FORMplanner.c \
	FORMdiffusion.c \
	FORMrobot.c \
	FORMmobcam.c \
	FORMconstraints.c \
	FORMenv.c \
	FORMfilter.c \
	FORMmain.c \
	FORMoptim.c \
  FORMpath_deform.c \
  FORMmultiLocalPath.c \
  FORMsoftMotion.c \
  FORMgenom.c

ifeq (1,$(BIO))
        SRC_MOVE3D += FORM_bio_collision.c
endif

#---
# ANIMATION PERSONNAGES (optionel)
#---
ifeq (1,$(ANIMATION))
MOVE3D_MODULES += ANIM
LIB_ANIM = libanim.a
MOVE3D_LIBS += $(LIB_ANIM)
CPPFLAGS += -DANIMATION
VPATH := $(VPATH):$(HOME_SRC)/animation

SRC_ANIM = \
        anim_interface.c \
        anim_load_file.c \
        anim_load_file_interface.c \
        anim_process_mcap.c \
        anim_process_mcap_interface.c \
        anim_reactive.c \
        anim_reactive_interface.c \
        anim_compute_path.c \
        anim_compute_path_interface.c \
        anim_optim_path.c \
        anim_optim_path_interface.c \
        anim_sample_path.c \
        anim_sample_path_interface.c \
        anim_charac_traj.c \
        anim_charac_traj_interface.c \
        anim_walk_controller.c \
        anim_walk_controller_interface.c \
        anim_reac_col.c \
        anim_reac_col_interface.c \
        anim_show_interface.c \
        anim_utils.c \
        anim_fft.c
endif

#---
# BIO
#---

ifeq (1,$(BIO))
MOVE3D_MODULES += BIO
LIB_BIO = libbio.a
MOVE3D_LIBS += $(LIB_BIO)
CPPFLAGS += -DBIO
VPATH := $(VPATH):$(HOME_SRC)/bio:$(HOME_SRC)/bio/BioCD:$(HOME_SRC)/bio/BioStructures:$(HOME_SRC)/bio/BioUtil:$(HOME_SRC)/bio/BioLoop:$(HOME_SRC)/bio/BioPlanner

SRC_BIO = \
	bio_ik.c\
	bio_loop.c\
	bio_track_loop.c\
	bcd_init.c \
	bcd_resize.c \
	bcd_shordist.c \
	bcd_hierarchies.c \
	bcd_util.c \
	bcd_test.c \
	bio_localpath.c \
	bio_planner_util.c \
	bio_ligandbased_rrt.c \
	bio_interface_utilities.c \
	bio_expand_lig_sc.c \
	move3d_pdb.c \
	psf_util.c \
	psf_defs_bio.c \
	psf_get_set.c \
	psf_rw.c \
	psf_to_p3d.c \
	aaa_rw.c \
	FORM_aaa.c \
	FORM_files_selector.c \
	FORM_joint_lig.c \
        biostruct_util.c
endif

#-------
# ENERGY
#-------

ifeq (1,$(ENERGY))
MOVE3D_MODULES += ENERGY
LIB_ENERGY = libenergy.a
MOVE3D_LIBS += $(LIB_ENERGY)
CPPFLAGS += -DENERGY
VPATH := $(VPATH):$(HOME_SRC)/bio/BioEnergy

SRC_ENERGY = \
	FORM_bio_energy.c \
	mini.f \
	read_inp.f \
	data_init.f \
	read_parm.f \
	pdbmat.f \
	blocpdb.f \
	diagrtb.f \
	diagstd.f \
	parser.f \
	prepmat.f \
	rtb.f \
	rtb_to_modes.f \
	bio_nmode.c\
	bio_allocations.c\
	bio_minimization.c\
	bio_2amber.c \
	bio_rrt_E_minimizer.c \
	bio_coldeg_planner.c \
	bioenergy_common.c
endif


#---
# FK_CNTRT
#---
ifeq (1,$(FK_CNTRT))
CPPFLAGS += -DFK_CNTRT
endif

#---
# GRASP_PLANNING
#---
ifeq (1,$(GRASP_PLANNING))
MOVE3D_MODULES += GRASP_PLANNING
LIB_GRASP_PLANNING = libgraspPlanning.a
MOVE3D_LIBS += $(LIB_GRASP_PLANNING)
CPPFLAGS += -DGRASP_PLANNING
VPATH := $(VPATH):$(HOME_SRC)/graspPlanning:$(HOME_SRC)/graspPlanning/include

SRC_GRASP_PLANNING = \
	gp_force_closure.c \
	gp_inertia_axes.c \
	gpGrasp.cpp \
	gp_grasping_utils.cpp \
	gp_grasp_generation.cpp \
	gp_grasp_io.cpp \
	gp_volInt.c \
	gp_geometry.cpp \
 	gp_extensionsM3D.c \
 	gpConvexHull.cpp \
 	gpPose.cpp \
	FORMgraspPlanning.c
endif

#---
# HRI_PLANNER
#---
ifeq (1,$(HRI_PLANNER))
MOVE3D_MODULES += HRI_PLANNER
LIB_HRI_PLANNER = libhriplanner.a
MOVE3D_LIBS += $(LIB_HRI_PLANNER)
CPPFLAGS += -DHRI_PLANNER
VPATH := $(VPATH):$(HOME_SRC)/hri_planner:$(HOME_SRC)/hri_planner/graphic:$(HOME_SRC)/hri_planner/hri_bitmap

SRC_HRI_PLANNER = \
	FORMhri_planner.c \
	FORMpsp_parameters.c \
	FORMgikjointselection.c \
	hri_bitmap_util.c \
	hri_bitmap_cost.c \
	hri_bitmap_draw.c \
	hri_bitmap_bin_heap.c \
	hri_bitmap.c \
	hri_gik.c \
	hri_manip.c \
	p3d_perspective.c \
	hri_wave_exp.c \
	g3d_draw_camera.c \
	g3d_perspective_window.c \
	g3d_position_area.c \
	g3d_draw_navigation.c

endif

#---
# LIGHT_PLANNER
#---
ifeq (1,$(LIGHT_PLANNER))
CPPFLAGS += -DLIGHT_PLANNER
MOVE3D_MODULES += LIGHT_PLANNER
LIB_LIGHT_PLANNER = liblightplanner.a
MOVE3D_LIBS += $(LIB_LIGHT_PLANNER)
VPATH := $(VPATH):$(HOME_SRC)/lightPlanner

SRC_LIGHT_PLANNER = \
	lightPlanner.c \
	robotPos.c \
	lightPlannerApi.c \
	DlrParser.cpp \
	DlrPlanner.cpp \
	DlrObject.cpp \
	DlrPlan.cpp
endif

ifeq (1,$(DPG))
CPPFLAGS += -DDPG
MOVE3D_MODULES += DPG
LIB_DPG = libdpg.a
MOVE3D_LIBS += $(LIB_DPG)
VPATH := $(VPATH):$(HOME_SRC)/planner/dpg

SRC_DPG = \
	DpgGrid.cpp \
	DpgCell.cpp
endif

#---
# User Application
#---
VPATH := $(VPATH):$(HOME_SRC)/userappli

SRC_USER = FORMuser_appli.c\
  user_appli.c

#---
# Included files
#---

MOVE3D_INC = ebt.h \
	graph.h \
	list.h \
	move3d.h \
	p3d.h \
	p3d_fct.h \
	p3d_matrix.h \
	p3d_poly.h \
	p3d_sys.h \
	p3d_type.h \
	polyhedre.h \
	rs.h

ifeq (1,$(GJK))
CPPFLAGS += -DGJK_DEBUG
endif
ifeq (1,$(OBB_EVAL))
CPPFLAGS += -DOBB_EVALUATION
endif
ifeq (1,$(KCD_CP_IS_SOLID))
CPPFLAGS += -DCP_IS_SOLID
endif
ifeq (1,$(KCD_USE_P3D_BODY_AABB))
CPPFLAGS += -DUSE_P3D_BODY_AABB
endif
ifeq (1,$(KCD_APPROX_ROBOT))
CPPFLAGS += -DAPPROX_ROBOT
endif
ifeq (1,$(MULTIGRAPH))
CPPFLAGS += -DMULTIGRAPH
endif

ifeq (1,$(MULTILOCALPATH))
CPPFLAGS += -DMULTILOCALPATH
endif

ifeq (1,$(PLANAR_SHADOWS))
CPPFLAGS += -DPLANAR_SHADOWS
endif

ifeq (1,$(PQP))
CPPFLAGS += -DPQP
endif

ifeq (1,$(USE_CXX_PLANNER))
CPPFLAGS += -DUSE_CXX_PLANNER
endif

# Rules used to automatically generate OBJ_<MODULE> and MEMLIB_<MODULE> from SRC_<MODULE> and LIB_<MODULE>, where MODULE is each of the names defined in MOVE3D_MODULES
$(foreach MOD,$(MOVE3D_MODULES),$(eval OBJ_$(MOD) = $(SRC_$(MOD))))

# compile .o files from .c, .cpp, .f and .C files
change_extension = $(eval $(1) = $(patsubst %.$(2),%.o,$($(1))))
$(foreach MOD, $(MOVE3D_MODULES), $(foreach EXT,c cpp C f,$(call change_extension,OBJ_$(MOD),$(EXT))))

# store the .o files in libraries
$(foreach MOD, $(MOVE3D_MODULES), $(eval MEMLIB_$(MOD) = $(patsubst %,$(LIB_$(MOD))(%), $(OBJ_$(MOD)))))

$(foreach MOD, $(MOVE3D_MODULES), $(eval ALLOBJECTS := $(ALLOBJECTS) $(OBJ_$(MOD))))
