/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Tue May 12 14:41:50 2009
 */
#ifndef __CEXTRACT__

extern int find_affordance();
extern int show_affordance();
extern int create_3d_grid_for_HRP2_GIK();
extern int show_3d_grid_for_HRP2_GIK();
extern int Find_AStar_Path(double qs[3], double qf[3], hri_bitmapset* bitmapset, int manip);
extern int show_HRP2_gik_sol();
extern void update_human_state_old(int state); //1 means sitting 0 means standing
extern int show_affordance_new();
extern int show_3d_grid_affordances();
extern int create_exact_obstacles_for_HRP2_GIK_manip(hri_bitmapset * bitmapset, int expansion, int bt_type);
extern int show_3d_grid_affordances_new();
extern int put_object_for_human_to_take();
extern int HRP2_find_collision_free_path_to_take_object();
extern int HRP2_put_object_for_human_to_take();
extern int show_exact_obstacles_for_HRP2_GIK_manip(hri_bitmapset * bitmapset, int bt_type);
extern int HRP2_return_hand_to_rest_position();
extern int HRP2_grasp_object(int for_hand,double hand_clench_val);
extern int HRP2_release_object(int for_hand,double hand_clench_val);
extern int HRP2_look_at_bottle();
extern int execute_current_HRP2_GIK_solution(int with_bottle);
extern int show_weighted_candidate_points_to_put_obj(int show_weight);
extern int update_human_state(int state); //1 means sitting 0 means standing
extern int get_cubic_spline_by_Hermite_polynomial(point_co_ordi point[100], int n, point_co_ordi init_vel, point_co_ordi final_vel, int continuity_constraint_type, double sampling_period, double total_time, point_co_ordi *resultant_spline);
extern int get_Hermite_polynomial_points(point_co_ordi st_point, point_co_ordi end_point, point_co_ordi st_vel, point_co_ordi end_vel, double sampling_rate, point_co_ordi *resultant_points);
extern int find_spline_path_for_HRP2_hand(hri_bitmapset * btset, hri_bitmap* bitmap, int hand_by_reach);
extern int show_spline_path_for_HRP2_hand();
extern int find_HRP2_GIK_sol_for_spline_path(int hand_by_reach, int state, int use_body_part, int maintain_hand_orientation);
extern int get_AStar_path(hri_bitmapset * btset, hri_bitmap* bitmap);
extern int find_spline_path_for_via_points(point_co_ordi via_points[500], int no_via_points);
extern int HRP2_find_collision_free_path_to_take_object_new();//In this version, the entire path is divided into three phases, first reach near to the bottle, then orient the hand then again plan a path from the new hand position to the bottle while maintaining the orientation
extern int find_HRP2_GIK_sol_for_hand_orientation(p3d_vector3 req_hand_orientation_in_global_frame, int hand_by_reach, int state, int use_body_part);
extern double* get_HRP2_hand_x_axis_orientation_in_global_frame(int for_hand);//1 for left, 2 for right hand
extern int find_affordance_new();
extern int find_reachable_sphere_surface(int for_hand, int for_agent);
extern int show_weighted_candidate_points_to_show_obj();
extern int HRP2_show_object_to_human();
extern int show_weighted_candidate_points_to_hide_obj();
extern int HRP2_hide_object_from_human();
extern int HRP2_put_object_for_human_to_take_new();
extern int HRP2_hide_object_from_human_new();
extern int HRP2_show_object_to_human_new();
extern int execute_Mightability_Map_functions();
extern int HRP2_look_at_point(p3d_vector3 point_to_look, int use_body_part);//use_body_part=0 for heand only, 1 for upper body, 2 for whole body. option 0 is not implemented yet
extern int update_robots_and_objects_status();
extern int update_3D_grid_for_Mightability_Maps(hri_bitmapset * bitmapset, int expansion, int bt_type);
extern int update_3D_grid_for_Mightability_Maps_new(hri_bitmapset * bitmapset, int expansion, int bt_type);
extern int update_Mightability_Maps();
extern int show_3D_workspace_Bounding_Box();
extern int make_cells_around_point_obstacle_free(double hand_pos[3], int expansion);
extern int make_cells_around_point_as_obstacle(hri_bitmapset *btset, int bt_type, point_co_ordi point, int extension);
extern int find_candidate_points_on_plane_to_put_obj_new();
extern int assign_weights_on_candidte_points_to_put_obj();
extern int reverse_sort_weighted_candidate_points_to_put_obj();
extern int assign_weights_on_candidte_points_to_show_obj();
extern int assign_weights_on_candidte_points_to_hide_obj();
extern int reverse_sort_weighted_candidate_points_to_show_obj();
extern int reverse_sort_weighted_candidate_points_to_hide_obj();
extern int find_candidate_points_to_hide_obj_new();
extern int find_candidate_points_to_show_obj_new();
extern int find_candidate_points_on_plane_to_put_obj();
extern int Create_and_init_Mightability_Maps();
extern int get_set_of_points_to_put_object();
extern int JIDO_find_candidate_points_on_plane_to_put_obj();
extern int find_symbolic_Mightability_Map();
extern int show_symbolic_Mightability_Map_Relations();
extern int is_object_graspable();
extern int show_candidate_points_for_curr_geo_node();
extern int find_symbolic_Mightability_Map_new();
extern int make_cells_around_point_as_near_to_obstacle(double hand_pos[3], int expansion);
extern int show_weighted_candidate_points_for_putinto_obj(int show_weight);
extern int reverse_sort_weighted_candidate_points_to_putinto_obj();
extern int get_object_mightabilities();
extern int show_object_Mightabilities();
extern int show_first_non_visible_cells(int obj_index);
extern int get_index_of_robot_by_name(char *rob_name);
extern int test_jido_grasp_traj();
extern int JIDO_put_obj_in_hand_into_trashbin(char trashbin_name[50], char obj_to_manipulate[50]);
extern int execute_JIDO_trajectory();
extern int simulate_object_falling(char obj_name[50]);
extern int play_all_JIDO_trajectories();

#endif /* __CEXTRACT__ */

