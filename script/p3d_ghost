#!/usr/local/bin/perl  -- -*-perl-*-

#--------------------------------------------------------------------
#  Convertir un modele compose de polyhedres (pas de primitives!)
#  en modele GRAPHIC englobe dans une boite GHOST
#--------------------------------------------------------------------

$noComments = 1;
$ghost = 1;
sub printbug {
  local(@table)=@_;
  print BUG "\n#########################\n"; 
  $quat = 4;
  for($line=0;$line<=$#table;$line++) {
    if($line == $quat) {
      print BUG "\n";
      $quat += 4;
    }
    for($column=0;$column<4;$column++) {
      print BUG "$table[$line][$column]\t";
      }
    print BUG "\n\n";
  }
}

##
##  Expressions regulieres
##

$number = '[-+]?\.?\d+\.?\d*[eE]?[-+]?\d*';
$name = '[\w\.\_\-\+\%]+';
$move3d_file = '[\w\_\-]+\.[pP]3[dD]';
$macro_file = '[\w\_\-]+\.macro';

##
##  PARAMETRES
##

if ($#ARGV < 1 || $#ARGV > 2) {
  print "\nConvert a model of polyhedrons (no primitives!)\n";
  print "to a GRAPHICal one with GHOST bounding boxes\n";
  die "\nUsage:\tgraphicGhost <filein> <fileout> (<show ghost!>)\n";
} elsif($#ARGV == 2) {
  $ghost = 0;
}

unless($noComments) {
  open(BUG, ">".'debugGG') or die "\nCannot open debug file\n";
}

$inputfile = $ARGV[0];
$outputfile = $ARGV[1];

$_ = $inputfile;
if(/$move3d_file|$macro_file/) {
  open(INPUT, $inputfile) or die "\nCannot open input file $inputfile\n";
} else {
  die "\nCannot open input file $inputfile\nFomat supported: .p3d & .macro\n";
}

$_ = $outputfile;
if(/$move3d_file|$macro_file/) {
  open(OUTPUT, ">".$outputfile) or die "\nCannot create output file $outputfile\n";
} else {
  close(INPUT);
  die "\nCannot create output file $outputfile\nFomat supported: .p3d & .macro\n";
}

print "\nGraphic & Ghost processing...\n";

##
##  GRAPHIC & GHOST
##

$epsilon = 1E-06;
$max = 1E09;
$last_spaces = 0;
$nb_bb = 0;

@vmax = (-$max,-$max,-$max);
@vmin = ($max,$max,$max);
@current_vmax = @vmax;
@current_vmin = @vmin;

#Construire la matrice de transformation sans les translations
sub build_matrix {
  ([$_[0],$_[1],$_[2],0.0],[$_[3],$_[4],$_[5],0.0],[$_[6],$_[7],$_[8],0.0],[0.0,0.0,0.0,1.0]);
}


#Construire la matrice de rotation autour d'un axe quelconque
sub rand_axe {
  $n2 = $_[0]*$_[0]+$_[1]*$_[1]+$_[2]*$_[2];
  $n  = sqrt($n2);
  $d = 1;
  if($n) { $d = $n; }
  $x  = $_[0]/$d;
  $y  = $_[1]/$d;
  $z  = $_[2]/$d;
  $s  = sin($_[3]);
  $c  = cos($_[3]);
  $v  = 1-$c;
  ([$x*$x*$v+$c,$x*$y*$v-$z*$s,$x*$z*$v+$y*$s,0.0],[$x*$y*$v+$z*$s,$y*$y*$v+$c,$y*$z*$v-$x*$s,0.0],[$x*$z*$v-$y*$s,$y*$z*$v+$x*$s,$z*$z*$v+$c,0.0],[0.0,0.0,0.0,1.0]);
}


#Produit matriciel 4*4 # 4*4 -> 4*4
sub mprod {
  local(@twice_matrix) = ();
  local(@resultm) = ();
  for($l=0;$l<=$#_;$l++) {
    for($c=0;$c<4;$c++) {
      $twice_matrix[$l][$c] = $_[$l][$c];
    }
  }

  for($i=0;$i<4;$i++) {
    for($j=0;$j<4;$j++) {
      $res = 0;
      for($k=0;$k<4;$k++) {
        $res += $twice_matrix[$i][$k] * $twice_matrix[$k+4][$j];
      }
      $resultm[$i][$j] = $res;
    }
  }
 
  @resultm;
}


#Produit matriciel 4*4 # 3*1 -> 3*1
sub vprod {
  local(@the_matrix) = ();
  local(@the_vector) = ();
  local(@resultv) = ();

  for($l=0;$l<4;$l++) {
    for($c=0;$c<4;$c++) {
      $the_matrix[$l][$c] = $_[$l][$c];
    }
  }
  for($l=0;$l<3;$l++) {
    $the_vector[$l] = $_[4][$l];
  }
  
  for($i=0;$i<3;$i++) {
    $res = 0;
    for($j=0;$j<3;$j++) {
      $res += $the_matrix[$i][$j] * $the_vector[$j];
    }
    $resultv[$i] = $res;
  }

  @resultv;
}


while (<INPUT>) {
  
  if(/^(\s*)(.*)\n/) {
    $last_spaces = $1;
    print OUTPUT "$1$2";
  }

  if(/p3d_add_desc_(?![vfj])/) {
    #'v'ert | 'f'ace | 'j'nt
    unless(/P3D_GRAPHIC/) { print OUTPUT " P3D_GRAPHIC"; }
  }

  print OUTPUT "\n";

  if(/p3d_beg_desc/) {
    @current_vmax = @vmax;
    @current_vmin = @vmin;
    $noComments or print "current_vmin(init) = #@current_vmin#\n";
    $noComments or print "current_vmax(init) = #@current_vmax#\n";
  } elsif(/p3d_add_desc_vert\s+($number)\s+($number)\s+($number)/) {
    if($1>$current_vmax[0]) {
      $current_vmax[0] = $1;
      $noComments or print "current_vmax = #@current_vmax#\n";
    }
    if($1<$current_vmin[0]) {
      $current_vmin[0] = $1;
      $noComments or print "current_vmin = #@current_vmin#\n";
    }
    if($2>$current_vmax[1]) {
      $current_vmax[1] = $2;
      $noComments or print "current_vmax = #@current_vmax#\n";
    }
    if($2<$current_vmin[1]) {
      $current_vmin[1] = $2;
      $noComments or print "current_vmax = #@current_vmax#\n";
    }
    if($3>$current_vmax[2]) {
      $current_vmax[2] = $3;
      $noComments or print "current_vmax = #@current_vmax#\n";
    }
    if($3<$current_vmin[2]) {
      $current_vmin[2] = $3;
      $noComments or print "current_vmin = #@current_vmin#\n";
    }
  } elsif(/p3d_set_prim_pos(_by_mat)?\s+($name)\s+($number)\s+($number)\s+($number)\s+($number)\s+($number)\s+($number)\s*($number)?\s*($number)?\s*($number)?\s*($number)?\s*($number)?\s*($number)?/) {
    local($primitive) = 0;
    PRIMITIVE: for($i=0;$i<3;$i++) {
      $primitive = ($current_vmax[$i]<$current_vmin[$i]);
      if($primitive) {
	last PRIMITIVE;
      }
    }
    unless($primitive) {
      local(@pos) = (0,0,0);
      if($1 eq "_by_mat") {
	@matrix = &build_matrix($3,$4,$5,$7,$8,$9,$11,$12,$13);      
	@pos = ($6,$10,$14);
      } else {
	@matrix = mprod(&rand_axe(1.0,0.0,0.0,$8),mprod(&rand_axe(0.0,1.0,0.0,$7),&rand_axe(0.0,0.0,1.0,$6)));
	@pos = ($3,$4,$5); 
      }
      $noComments or print "$3,$4,$5,$7,$8,$9,$11,$12,$13\n";
      $noComments or &printbug(@matrix);
      local(@new_vmax) = vprod(@matrix,[@current_vmax]);
      local(@new_vmin) = vprod(@matrix,[@current_vmin]);
      $noComments or print "new_vmax = #@new_vmax#\n";
      $noComments or print "new_vmin = #@new_vmin#\n";
      local(@size) = ();
      for($i=0;$i<3;$i++) {
	local($abs_diff) = abs($current_vmax[$i]-$current_vmin[$i]);
	$size[$i] = $abs_diff;

	if($new_vmax[$i]<$new_vmin[$i]) {
	  $current_vmax[$i] = $new_vmin[$i]; 
	  $current_vmin[$i] = $new_vmax[$i];
	} else {
	  $current_vmax[$i] = $new_vmax[$i]; 
	  $current_vmin[$i] = $new_vmin[$i];
	}
      }
      $noComments or print "size = #@size#\n";
      $noComments or print "current_vmax = #@current_vmax#\n";
      $noComments or print "current_vmin = #@current_vmin#\n";
      for($i=0;$i<3;$i++) {
	local($abs_diff) = abs($current_vmax[$i]-$current_vmin[$i]);
	local($middle) = ($current_vmax[$i]+$current_vmin[$i])/2;
	$pos[$i] += $middle;
      }
      $noComments or print "pos = #@pos#\n";
      
      print OUTPUT "\n$last_spaces#BEG GHOST BOX\n";
      print OUTPUT "$last_spaces  p3d_add_desc_box BB_$2 $size[0] $size[1] $size[2] ";
      unless($ghost) { print OUTPUT "\n#"; }
      print OUTPUT "P3D_GHOST\n";
      if($1 eq "_by_mat") {
	print OUTPUT "$last_spaces  p3d_set_prim_pos_by_mat BB_$2 $3 $4 $5 $pos[0] $7 $8 $9 $pos[1] $11 $12 $13 $pos[2] 0.0 0.0 0.0 1.0\n";
      } else {
	print OUTPUT "$last_spaces  p3d_set_prim_pos BB_$2 $pos[0] $pos[1] $pos[2] $6 $7 $8\n";
      }
      print OUTPUT "$last_spaces#END GHOST BOX\n\n";
      $nb_bb++;
      if($noComments) { 
	print "$nb_bb ";
	if($ghost) { 
	  print "ghost ";
	}
	print "bounding boxes added\r";
      }
    }
  }
}
$noComments or close(BUG);
close(INPUT);
close(OUTPUT);
print "\nGraphic & Ghost completed\n\n";
