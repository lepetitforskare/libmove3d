#ifndef _ROADMAP_H
#define _ROADMAP_H

/* Structure de noeud du graphe */
/* (pour la planification globale) */
typedef struct node {
  int         type; /* type du noeud (isole,...) */
  int         num; /* numero du noeud dans le graphe */
  int         numcomp; /* numero de la composante connexe du noeud */
  struct compco *comp;
  configPt q; /* la configuration du robot */
  double      dq; /* le rayon de la boule */
  int *iksol;  /* index of the solution generated by the cntrt (modif Juan) */
  double dqmin;
  int nneighb;    /* nombre de voisins dans le graphe */
  struct list_node *neighb; /* voisins du noeud dans le graphe */
  struct list_node *last_neighb;
  int nedge;    /* nombre d'arete partant du noeud dans le graphe */
  struct list_edge *edges; /* aretes reliant le noeud a ses voisins */
  struct list_edge *last_edge; /* aretes reliant le noeud a ses voisins */
  double dist_Nnew; /* distance au noeud courant cree */
  /* for graph exploration */
  double f;
  double g;
  double h; 
  short opened;            /* whether node is open in A* search */
  short closed;            /* whether node is closed in A* search */
  struct node *search_from; /* parent node in A* search */
  struct node *search_to;  
  struct edge *edge_from;  /* edge connecting to node search from */
} p3d_node, *pp3d_node;

typedef struct list_node{
  p3d_node *N;
  struct list_node *next;
  struct list_node *prev;
} p3d_list_node;


/* Structure d'arete du graphe */
typedef struct edge {
  p3d_node  *Ni, *Nf;
  p3d_localpath *path;
  p3d_localplanner_type planner; 
  double     longueur;
  int sens_edge;
} p3d_edge;

typedef struct list_edge{
  p3d_edge *E;
  struct list_edge *next;
  struct list_edge *prev;
} p3d_list_edge;

/* Structure de composante connexe */
typedef struct compco {
  int num; /* numero de la composante connexe */
  int nnode; /* nombre de noeuds dans la composante connexe */
  /* p3d_list_node *nodes; */ /* noeuds faisant partie de la composante connexe */
  p3d_list_node *dist_nodes;/* noeuds de la composante connexe pour le tri par distance */
  p3d_list_node *last_node; /* dernier noeud de la composante */
  struct compco *suiv;
  struct compco *prec;
  int ncanreach;
  struct list_compco * canreach;
  struct list_compco * last_canreach;
} p3d_compco;

typedef struct list_compco{
  struct compco *comp;
  struct list_compco *next;
  struct list_compco *prev;
} p3d_list_compco;


/* Structure d'exterma pour classer les paves selon les ddl */
typedef struct ddlbox{
  int num; /* numero du noeud auquel ce ddl se rattache */
  char   min_max; /* 0 si c'est un min, 1 si c'est un max */
  double val; /* valeur du min ou du max */
  struct ddlbox *next;
  struct ddlbox *prev;
} p3d_ddlbox;

/* Structure de graphe */
typedef struct graph {
  p3d_env *env; /* environnement auquel le graphe se rattache */
  p3d_rob *rob; /* robot auquel le graphe se rattache */
  char * file; /* nom du fichier de sauvegarde du graphe */
  int oriented;

  int nnode; /* nombre de noeuds dans le graphe */
  p3d_list_node *nodes; /* noeuds du graphe */
  p3d_list_node *last_node; /* dernier noeud du graphe */
  int nedge; /*nombre d'aretes */
  p3d_list_edge *edges; /* aretes */
  p3d_list_edge *last_edge;
  int ncomp; /* nombre de composantes connexes */
  p3d_compco *comp; /*liste des composantes connexes */
  p3d_compco *last_comp;
  p3d_ddlbox **ddlbox; /* liste des intervalles des paves sur les ddl */
  unsigned long int hhCount; /* number of the next point of the Halton Set */


  int        arc_type;
  int        arc_value;  
  p3d_node   *search_start;
  p3d_node   *search_goal; 
  p3d_node   *search_goal_sol;
  int        search_done;
  int        search_path;
  int        search_numdev;
  double     search_cost;
  int        search_path_length;

  double time;
  int nb_test_BB;
  int nb_test_coll;
  int nb_local_call;
  int nb_q;
  int nb_q_free;
  int nb_bkb_q_free;
  int nb_q_closed;

} p3d_graph, *pp3d_graph;

#endif
