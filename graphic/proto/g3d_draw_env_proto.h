/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.

 */


extern void g3d_set_draw_coll ( int n );
extern void g3d_set_multi_thread_mode(int mode);
extern void g3d_reinit_graphics ( int opengl_context );
extern void g3d_draw ( int opengl_context );
extern void g3d_draw_obstacles ( G3D_Window* win , int opengl_context);
extern void g3d_draw_robots ( G3D_Window *win );
extern void g3d_draw_env_box ( void );
extern void g3d_draw_robot ( int ir, G3D_Window* win , int opengl_context);
extern void g3d_draw_env(int opengl_context);
extern void g3d_draw_env_custom(void);
extern void g3d_draw_obstacle(G3D_Window *win,int opengl_context);
extern void g3d_draw_body(int coll, G3D_Window *win, int opengl_context);
extern void g3d_draw_object(p3d_obj *o, int coll, G3D_Window *win, int opengl_context);
extern void p3d_drawRobotMoveMeshs(void);
extern void g3d_draw_obj_BB(p3d_obj *o,int opengl_context);
extern int compute_wall_dimensions(double *_size, double *_xmin, double *_xmax, double *_ymin, double *_ymax, double *_zmin, double *_zmax);
extern void buildShadowMatrix( GLdouble fMatrix[16], GLfloat fLightPos[4], GLdouble fPlane[4] );
extern int g3d_draw_tiled_floor(GLdouble color[3], float dx, float dy, float xmin, float xmax, float ymin, float ymax, float zmin, float zmax, float shadowContrast);
extern void g3d_draw_floor(GLdouble color[3], int tiles, bool flatFloor) ;
extern void g3d_draw_wall(int wall, GLdouble color[3], int quadsPerEdge) ;
extern void g3d_draw_backwall(int wall);
extern void g3d_draw_and_col_allwin_active(void);
extern void showConfig(configPt conf);
extern void showConfig_2(configPt conf);
extern int g3d_does_robot_hide_object(p3d_matrix4 camera_frame, double camera_fov, p3d_rob *robot, p3d_rob *object, double *result);
extern void g3d_sky_box(double x, double y, double z);
